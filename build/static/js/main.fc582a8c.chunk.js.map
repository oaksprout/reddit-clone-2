{"version":3,"sources":["images/defaults/link.png","images/defaults/speech-bubble.jpg","firebase.js","db/index.js","actions/auth.js","actions/types.js","actions/subreddits.js","components/layout/Nav.js","components/layout/Header.js","components/layout/Footer.js","components/routing/PrivateRoute.js","components/layout/Hero.js","components/layout/Container.js","utils/dateFormatter.js","utils/getDocById.js","utils/getTextPreview.js","components/layout/MarkedText.js","actions/votes.js","components/subreddit/Votes.js","components/homepage/PostMedia.js","utils/getFileName.js","storage/index.js","actions/posts.js","components/mobile/MobileCard.js","components/homepage/AllPosts.js","actions/users.js","components/homepage/Index.js","components/subreddit/PostCard.js","components/subreddit/Posts.js","utils/isImage.js","hooks/useStorage.js","components/subreddit/ProgressBar.js","components/subreddit/PostForm.js","components/subreddit/Subreddit.js","utils/commentTimeFormatter.js","components/post/UpdateForm.js","components/post/CommentForm.js","components/post/ReplyForm.js","components/updateComment/UpdateCommentForm.js","actions/comments.js","components/post/CommentReply.js","components/post/PostComment.js","components/mobile/MobileCommentReply.js","components/mobile/MobileComment.js","components/post/Post.js","components/user/UserPost.js","components/user/UserComment.js","components/mobile/UserMobileComment.js","components/mobile/UserMobileCard.js","components/user/User.js","components/subreddits/SubCard.js","components/mobile/SubMobileCard.js","components/subreddits/Subreddits.js","components/createSubreddit/CreateSubreddit.js","reducers/users.js","reducers/auth.js","reducers/posts.js","reducers/subreddits.js","reducers/comments.js","reducers/votes.js","reducers/index.js","store.js","App.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","settings","login","dispatch","a","provider","auth","TwitterAuthProvider","signInWithPopup","user","payload","name","displayName","id","uid","image","photoURL","newUser","created_at","FieldValue","serverTimestamp","collection","doc","set","type","console","error","message","fetchSubreddits","get","forEach","push","data","connect","state","subreddits","logout","signOut","currentUser","isLoggedIn","useEffect","useState","className","role","aria-label","style","fontSize","to","fontFamily","marginRight","onClick","Header","Date","getFullYear","href","rel","target","Component","component","isLoading","rest","render","props","Hero","large","medium","color","children","Container","date","seconds","Math","floor","interval","isNaN","arr","id_type","filter","el","str","slicedText","slice","trim","length","MarkedText","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","marked","fetchVotes","upvote","vote_id","post_id","user_id","singlePost","upvoteFlag","userUpvoted","userDownvoted","where","update","user_upvotes","arrayRemove","updated_at","votes","increment","arrayUnion","user_downvotes","then","downvote","postId","voteId","userUpvotes","userDownvotes","indexOf","disabled","Object","entries","PostMedia","imageSrc","aHref","post","users","author","getDocById","subreddit","subreddit_id","vote","fileRef","url","LinkImage","SpeechBubble","undefined","src","alt","title","desc","getTextPreview","dateFormatter","endpoint","lastForwardSlash","lastIndexOf","Error","partialUrl","storage","fetchAllPosts","sort","obj1","obj2","deletePost","querySnapshot","batch","delete","ref","commit","storageRef","imageName","getFileName","imageRef","child","AllPosts","posts","map","isMobile","key","fetchUsers","PostCard","postVotes","getPreviewText","Posts","search","sortByVote","toggleSortByVote","sortByNew","toggleSortByNew","getAuthor","getVoteByPostId","getPostByVoteId","b","orderByVotes","regex","RegExp","match","filterPosts","useStorage","file","progress","setProgress","setError","setUrl","put","on","snapshot","percentage","bytesTransferred","totalBytes","err","getDownloadURL","ProgressBar","input","setInput","setImageFile","width","height","backgroundColor","createPost","newPost","postsDoc","votesDoc","postsPayload","votesPayload","toggleShowForm","imageFile","uploadFile","toggleUploadFile","previewMarkdown","togglePreviewMarkdown","handleChange","event","value","onSubmit","preventDefault","newImage","newUrl","newFileRef","fileName","isImage","handleSubmit","placeholder","required","onChange","newFile","files","fileChange","deleteSubreddit","history","window","confirm","fetchSubredditPosts","fetchSubreddit","params","useParams","useHistory","showForm","setSearch","small","fontWeight","lineHeight","timeInSeconds","timeInMilliseconds","format","updatePost","body","updatedPost","oldTitle","oldDesc","oldUrl","oldImage","oldFileRef","CommentForm","addComment","content","newComment","parent_id","ReplyForm","toggleReplyForm","comment_id","UpdateCommentForm","oldContent","updateComment","toggleUpdateForm","newDoc","updatedComment","deleteComment","comment","updateForm","commentTimeFormatter","comments","replyForm","childrenComments","tempChildrenComments","getChildrenComments","flexDirection","alignItems","fetchPost","res","fetchPostVote","fetchPostComments","marginLeft","marginBottom","UserPost","UserComment","UserMobileComment","UserMobileCard","fetchUser","fetchUserPosts","fetchUserComments","userPostList","toggleUserPostList","userCommentList","toggleUserCommentList","margin","bio","SubCard","SubMobileCard","sub","nanoseconds","createSubreddit","newSubreddit","toLowerCase","replaceAll","maxLength","selected","initialState","combineReducers","action","updatedPosts","newPosts","updatedSubreddits","deletedSubreddits","updatedComments","addVote","removeVote","deleteVote","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","onAuthStateChanged","setUser","getUser","exact","from","Index","path","CreateSubreddit","Subreddits","Subreddit","Post","User","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fc582a8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/link.204212aa.png\";","module.exports = __webpack_public_path__ + \"static/media/speech-bubble.c9ad79f6.jpg\";","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCb52WtWB7I14uzj2WqKPUqgf3eAeL_cS0\",\n  authDomain: \"offerings-aa4ae.firebaseapp.com\",\n  projectId: \"offerings-aa4ae\",\n  storageBucket: \"offerings-aa4ae.appspot.com\",\n  messagingSenderId: \"667282666621\",\n  appId: \"1:667282666621:web:14610c4000519f7f802d14\",\n  measurementId: \"G-T9KNQX3N8Q\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import firebase from '../firebase';\n\nconst db = firebase.firestore();\ndb.settings({});\n\nexport default db;","import {\n  LOGIN_USER,\n  LOGOUT_USER,\n  GET_CURRENT_USER,\n  LOGIN_FAIL\n} from './types';\nimport firebase from '../firebase';\nimport db from '../db';\n\n// update the store with user information\nexport const getUser = (user) => async dispatch => {\n  dispatch({\n    type: GET_CURRENT_USER,\n    payload: user\n  });\n}\n\nexport const login = () => async dispatch => {\n  try {\n    // Sign in with Firebase Auth\n    const provider = new firebase.auth.TwitterAuthProvider();\n    const { user } = await firebase.auth().signInWithPopup(provider);\n    \n    // Set up the user\n    const payload = {\n      name: user.displayName,\n      id: user.uid,\n      image: user.photoURL\n    }\n    const newUser = {\n      ...payload,\n      created_at: firebase.firestore.FieldValue.serverTimestamp()\n    }\n\n    // POST the db\n    db.collection('users').doc(newUser.id).set(newUser);\n\n    // Then send it to Redux store\n    dispatch({\n      type: LOGIN_USER,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport const logout = () => async dispatch => {\n  try {\n    await firebase.auth().signOut();\n    dispatch({\n      type: LOGOUT_USER\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n// login failure\nexport const userError = () => dispatch => {\n  dispatch({ type: LOGIN_FAIL })\n}","// Users\nexport const GET_USERS = 'GET_USERS';\nexport const GET_USER = 'GET_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\n\n// Auth\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport const GET_CURRENT_USER = 'GET_CURRENT_USER';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n\n// Subreddits\nexport const GET_SUBREDDITS = 'GET_SUBREDDITS';\nexport const GET_SUBREDDIT = 'GET_SUBREDDIT';\nexport const CREATE_SUBREDDIT = 'CREATE_SUBREDDIT';\nexport const UPDATE_SUBREDDIT = 'UPDATE_SUBREDDIT';\nexport const DELETE_SUBREDDIT = 'DELETE_SUBREDDIT';\nexport const CLEAR_SUBREDDIT = 'CLEAR_SUBREDDIT';\n\n// Posts\nexport const GET_POSTS = 'GET_POSTS';\nexport const GET_POST = 'GET_POST';\nexport const CREATE_POST = 'CREATE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const CLEAR_POST = 'CLEAR_POST';\nexport const CLEAR_POSTS = 'CLEAR_POSTS';\n\n// Votes\nexport const GET_VOTES = 'GET_VOTES';\nexport const GET_VOTE = 'GET_VOTE';\nexport const ADD_VOTE = 'ADD_VOTE';\nexport const ADD_VOTES = 'ADD_VOTES';\nexport const REMOVE_VOTE = 'REMOVE_VOTE';\nexport const DELETE_VOTE = 'DELETE_VOTE';\nexport const CLEAR_VOTE = 'CLEAR_VOTE';\n\n// Comments\nexport const GET_COMMENTS = 'GET_COMMENTS';\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const CLEAR_COMMENTS = 'CLEAR_COMMENTS';","import {\n  GET_SUBREDDITS,\n  GET_SUBREDDIT,\n  CREATE_SUBREDDIT,\n  UPDATE_SUBREDDIT,\n  DELETE_SUBREDDIT,\n  CLEAR_SUBREDDIT\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\nexport const fetchSubreddits = () => async dispatch => {\n  try {\n    let payload = [];\n    const res = await db.collection('subreddits').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    })\n    dispatch({\n      type: GET_SUBREDDITS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport const fetchSubreddit = (params) => async dispatch => {\n  dispatch({ type: CLEAR_SUBREDDIT });\n  const { name } = params;\n  try {\n    let payload = {};\n    const res = await db.collection('subreddits').where('name', '==', name).get();\n    res.forEach(doc => {\n      payload = {...doc.data()};\n    });\n    dispatch({\n      type: GET_SUBREDDIT,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const createSubreddit = (body, history) => async dispatch => {\n  try {\n    // Create an ID\n    const doc = db.collection('subreddits').doc();\n    let newSubreddit = {...body};\n    newSubreddit.id = doc.id;\n    newSubreddit.created_at = firebase.firestore.FieldValue.serverTimestamp();\n\n    await db.collection('subreddits').doc(newSubreddit.id).set(newSubreddit);\n    dispatch({\n      type: CREATE_SUBREDDIT,\n      payload: newSubreddit\n    });\n    if (history) {\n      history.push(`/r/${newSubreddit.name}`);\n    }\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const updateSubreddit = body => async dispatch => {\n  try {\n    await db.collection('subreddits').doc(body.id).set(body);\n    \n    dispatch({\n      type: UPDATE_SUBREDDIT,\n      payload: body\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const deleteSubreddit = (subreddit_id, history) => async dispatch => {\n  if (window.confirm('Are you sure? This action cannot be undone!')) {\n    try {\n      // Delete associated posts\n      await db.collection('posts').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n      // Delete associated votes\n      await db.collection('votes').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n      // Delete associated comments\n      await db.collection('comments').where('subreddit_id', '==', subreddit_id).get().then(querySnapshot => {\n        let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n      });\n\n      await db.collection('subreddits').doc(subreddit_id).delete();\n\n      dispatch({\n        type: DELETE_SUBREDDIT,\n        payload: subreddit_id\n      });\n      history.push('/');\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n}","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { login, logout } from '../../actions/auth';\nimport { fetchSubreddits } from '../../actions/subreddits';\n\nimport {FaTwitter} from 'react-icons/fa'\n\nconst Nav = ({\n  login,\n  logout,\n  fetchSubreddits,\n  subreddits: { subreddits },\n  auth: { currentUser, isLoggedIn }\n}) => {\n  useEffect(() => {\n    fetchSubreddits();\n  }, [fetchSubreddits]);\n\n  const [ isActive, setIsActive ] = useState(false);\n\n  return (\n    <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"dropdown navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item\" style={{fontSize: 20}} to=\"/\">\n          <span style={{fontFamily: \"Liu Jian Mao Cao\", marginRight: 10}}>血</span> Blood Ledger\n        </Link>\n\n        {/* <button\n          className={`navbar-burger burger ${isActive && 'is-active'}`}\n          aria-label=\"menu\"\n          aria-expanded=\"false\"\n          data-target=\"navbarBasicExample\"\n          onClick={() => setIsActive(!isActive)}\n          style={{ outline: 'none', border: 'none' }}\n        >\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </button> */}\n      </div>\n\n      <div id=\"navbarBasicExample\" className={`navbar-menu is-primary`}>\n        {/* <div className=\"navbar-start\">\n          <div className=\"navbar-item has-dropdown is-hoverable\">\n            <Link to=\"/r/index\" className=\"navbar-link is-arrowless\">\n              Subreddits\n            </Link>\n            <div className=\"navbar-dropdown\">\n              {\n                subreddits !== null && (\n                  subreddits.map(subreddit => {\n                    return (\n                      <Link key={subreddit.id} className=\"navbar-item is-capitalized\" to={`/r/${subreddit.name}`}>{subreddit.name}</Link>\n                    )\n                  })\n                )\n              }\n              { isLoggedIn && <Link className=\"navbar-item\" to='/create-a-subreddit'>Create a Subreddit</Link> }\n            </div>\n          </div>\n          <div className=\"navbar-item\">\n            { isLoggedIn && <Link to='/create-a-subreddit'>Create a Subreddit</Link>}\n          </div>\n        </div> */}\n\n        <div className=\"navbar-end\">\n            {\n              !isLoggedIn ? (\n                <div className=\"navbar-item\">\n                  <button className=\"button is-white is-outline\" onClick={() => login()}>\n                    <FaTwitter style={{marginRight: 10}} />\n                    Sign In\n                  </button>\n                </div>\n              ) : (\n                <>\n                  <div className=\"navbar-item\">\n                    <Link to={`/u/${currentUser.id}`} className=\"button is-light is-info\">{currentUser.name}</Link>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <button className=\"button is-primary\" onClick={() => logout()}>\n                      Logout\n                    </button>\n                  </div>\n                </>\n              )\n            }\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nNav.propTypes = {\n  auth: PropTypes.object,\n  login: PropTypes.func.isRequired,\n  logout: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  subreddits: state.subreddits\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    login,\n    logout,\n    fetchSubreddits\n  }\n)(Nav);","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport Nav from './Nav';\n\nconst Header = () => {\n  return (\n    <header>\n      <Nav />\n    </header>\n  )\n}\n\n// Header.propTypes = {\n\n// }\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport {\n  login,\n  logout\n} from '../../actions/auth';\n\nconst Footer = ({\n  auth: { isLoggedIn, currentUser }\n}) => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"columns\">\n        <div className=\"column mid-column has-text-centered\">\n          <p>\n            &copy;{new Date().getFullYear()} <a href=\"http://www.twitter.com/tannedoaksprout\" rel=\"noopener noreferrer\" target=\"_blank\">Oaksprout the Tan</a>\n          </p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  auth: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n})\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Footer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux'\n\n// Not quite working with Firestore\n// If a user types in the address, isLoggedIn doesn't trigger that quickly\n// The user is not popped into the database quick enough\nconst PrivateRoute = ({\n  component: Component,\n  auth: { isLoggedIn, isLoading },\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={props => (!isLoggedIn && isLoading) ? (\n        <Redirect to=\"/\" />\n      ) : (\n        <Component {...props} />\n      )}\n    />\n  );\n};\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PrivateRoute);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Hero = ({\n  large,\n  medium,\n  color,\n  children\n}) => {\n  return (\n    <div\n      className={`hero\n        ${color === 'yellow' && 'is-warning'}\n        ${color === 'green' && 'is-success'}\n        ${color === 'lightblue' && 'is-info'}\n        ${color === 'darkblue' && 'is-link'}\n        ${color === 'light' && 'is-light'}\n        ${color === 'dark' && 'is-dark'}\n        ${color === 'teal' && 'is-primary'}\n        ${large && 'is-large'}\n        ${medium && 'is-medium'}\n      `}\n    >\n      { children }\n    </div>\n  )\n}\n\nHero.propTypes = {\n  large: PropTypes.bool,\n  medium: PropTypes.bool,\n}\n\nexport default Hero;","import React from 'react';\n\nconst Container = props => {\n  return (\n    <div className=\"container my-5\">\n      { props.children }\n    </div>\n  )\n}\n\nexport default Container;","export default function(date) {\n  date = date * 1000;\n  const seconds = Math.floor((new Date() - date) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n  if (interval > 1) return `${interval} years`;\n\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) return `${interval} months`;\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 0) return `${interval} days`;\n\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) return `${interval} hours`;\n\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) return `${interval} minutes`;\n\n  return `${isNaN(Math.floor(seconds)) ? '0' : Math.floor(seconds)} seconds`;\n}","export default function(arr, id, id_type='id') {\n  return arr.filter(el => el[id_type] === id)[0];\n}","export default function(str) {\n  let slicedText = str.slice(0,140).trim();\n  let len = slicedText.length;\n\n  if (len > 139) {\n    return `${slicedText}...`;\n  }\n  return slicedText;\n}","import React from 'react';\nimport marked from 'marked';\nimport DOMPurify from 'dompurify';\n\nconst MarkedText = ({\n  children\n}) => {\n  const getMarkdownText = () => {\n    let rawMarkup = DOMPurify.sanitize(marked(children));\n    return { __html: rawMarkup };\n  }\n  return (\n    <div dangerouslySetInnerHTML={getMarkdownText()}></div>\n  )\n}\n\nexport default MarkedText;","import {\n  GET_VOTES,\n  GET_VOTE,\n  ADD_VOTE,\n  REMOVE_VOTE,\n  CLEAR_VOTE\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\n\nexport const fetchVotes = () => async dispatch => {\n  try {\n    let payload = [];\n    const res = await db.collection('votes').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    dispatch({\n      type: GET_VOTES,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const fetchPostVote = post_id => async dispatch => {\n  let payload;\n  try {\n    const res = await db.collection('votes').where('post_id', '==', post_id).get();\n    res.forEach(doc => {\n      payload = doc.data();\n    });\n    dispatch({ type: CLEAR_VOTE });\n    dispatch({\n      type: GET_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const upvote = (vote_id, post_id, user_id, singlePost=false) => async dispatch => {\n  // IF user_id exists in user_upvotes, remove user_id and votes--\n  // ELSE IF user_id exists in user_downvotes, remove user_id from downvotes, add user_id to upvotes, votes += 2\n  // ELSE user_id does not exist in user_upvotes, add user_id and votes++\n  let payload;\n  let upvoteFlag = {\n    userUpvoted: false,\n    userDownvoted: false\n  }\n  try {\n    let upvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_upvotes', 'array-contains', user_id).get();\n    upvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userUpvoted = true;\n    });\n\n    let downvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_downvotes', 'array-contains', user_id).get();\n    downvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userDownvoted = true;\n    });\n\n\n    if (upvoteFlag.userUpvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-1)\n      });\n    } else if (upvoteFlag.userDownvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        user_downvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(2)\n      });\n    } else {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(1)\n      });\n    }\n\n    await db.collection('votes').doc(vote_id).get().then(doc => {\n      payload = doc.data();\n    });\n    if (singlePost) {\n      dispatch({ type: CLEAR_VOTE });\n      dispatch({ type: GET_VOTE, payload });\n    }\n    \n    dispatch({\n      type: ADD_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const downvote = (vote_id, post_id, user_id, singlePost=false) => async dispatch => {\n  let payload;\n  let upvoteFlag = {\n    userUpvoted: false,\n    userDownvoted: false\n  }\n\n  try {\n    let upvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_upvotes', 'array-contains', user_id).get();\n    upvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userUpvoted = true;\n    });\n\n    let downvoteQuery = await db.collection('votes').where('post_id', '==', post_id).where('user_downvotes', 'array-contains', user_id).get();\n    downvoteQuery.forEach(doc => {\n      if (doc) upvoteFlag.userDownvoted = true;\n    });\n\n\n    if (upvoteFlag.userUpvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_upvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        user_downvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-2)\n      });\n    } else if (upvoteFlag.userDownvoted) {\n      await db.collection('votes').doc(vote_id).update({\n        user_downvotes: firebase.firestore.FieldValue.arrayRemove(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(1)\n      });\n    } else {\n      await db.collection('votes').doc(vote_id).update({\n        user_downvotes: firebase.firestore.FieldValue.arrayUnion(user_id),\n        updated_at: firebase.firestore.FieldValue.serverTimestamp(),\n        votes: firebase.firestore.FieldValue.increment(-1)\n      });\n    }\n\n    await db.collection('votes').doc(vote_id).get().then(doc => {\n      payload = doc.data();\n    });\n    if (singlePost) {\n      dispatch({ type: CLEAR_VOTE });\n      dispatch({ type: GET_VOTE, payload });\n    }\n    \n    dispatch({\n      type: REMOVE_VOTE,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { upvote, downvote } from '../../actions/votes';\n\nconst Votes = ({\n  postId,\n  voteId,\n  upvote,\n  downvote,\n  votes,\n  userUpvotes,\n  userDownvotes,\n  currentUser\n}) => {\n  let vote_id = voteId;\n  let post_id = postId;\n  let user_id = currentUser.id;\n  return (\n    <div className=\"votes\">\n      <button\n        className={`button is-success is-small ${userUpvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n        disabled={Object.entries(currentUser).length === 0}\n        onClick={() => upvote(vote_id, post_id, user_id)}\n      >\n        Upvote\n      </button>\n      <span className=\"vote-amount my-1\">{ votes }</span>\n      <button\n        className={`button is-danger is-small ${userDownvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n        disabled={Object.entries(currentUser).length === 0}\n        onClick={() => downvote(vote_id, post_id, user_id)}\n      >\n        Downvote\n      </button>\n    </div>\n  )\n}\n\nVotes.propTypes = {\n  postId: PropTypes.string.isRequired,\n  userUpvotes: PropTypes.array,\n  userDownvotes: PropTypes.array,\n  currentUser: PropTypes.object.isRequired,\n  upvote: PropTypes.func.isRequired,\n  downvote: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  null,\n  { upvote, downvote }\n)(Votes);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dateFormatter from '../../utils/dateFormatter';\nimport getDocById from '../../utils/getDocById';\nimport getTextPreview from '../../utils/getTextPreview';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nimport MarkedText from '../layout/MarkedText';\nimport Votes from '../subreddit/Votes';\n\nconst PostMedia = ({\n  post,\n  users,\n  votes,\n  currentUser,\n  subreddits\n}) => {\n  const author = getDocById(users, post.user_id);\n  const subreddit = getDocById(subreddits, post.subreddit_id);\n  let vote = getDocById(votes, post.id, 'post_id');\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n\n  return (\n    <div className=\"my-6 media\">\n      {\n        vote !== undefined && (\n          <div className=\"media-left align-center\">\n            <Votes\n              voteId={vote.id}\n              postId={vote.post_id}\n              votes={vote.votes}\n              userUpvotes={vote.user_upvotes}\n              userDownvotes={vote.user_downvotes}\n              currentUser={currentUser}\n            />\n          </div>\n        )\n      }\n      <div className=\"media-image media-left align-center\">\n        <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n          <figure className=\"image is-128x128 center-image border-image\">\n            <img\n              src={imageSrc}\n              alt=\"\"\n            />\n          </figure>\n        </a>\n      </div>\n      <div className={`media-content post-content`}>\n        <p>\n          {subreddit && <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link>}\n        </p>\n        {\n          post.desc && (\n            <div className=\"mb-3\">\n              <MarkedText>{getTextPreview(post.desc)}</MarkedText>\n            </div>\n          )\n        }\n        <div className=\"level\">\n          <div className=\"level-item has-text-centered is-size-7\">\n            Created { dateFormatter(post.created_at.seconds) }\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            Updated { dateFormatter(post.updated_at.seconds) }\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            {author && <Link to={`/u/${author.id}`}>{author.name}</Link>}\n          </div>\n          <div className=\"level-item has-text-centered is-size-7\">\n            {subreddit && <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link>}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPostMedia.propTypes = {\n  post: PropTypes.object,\n  users: PropTypes.array,\n  subreddits: PropTypes.array,\n  votes: PropTypes.array,\n  currentUser: PropTypes.object,\n}\n\nexport default PostMedia;","export default function(url) {\n  const lastForwardSlash = url.lastIndexOf('/');\n  if (lastForwardSlash === -1) throw Error;\n  let endpoint;\n  let partialUrl = url.slice(lastForwardSlash + 1);\n  if (partialUrl.indexOf('?') !== -1) {\n    endpoint = partialUrl.indexOf('?');\n    return partialUrl.slice(0, endpoint);\n  }\n  return partialUrl;\n}","import firebase from 'firebase';\n\nconst storage = firebase.storage();\n\nexport default storage;","import {\n  GET_POSTS,\n  GET_POST,\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  CLEAR_POST,\n  CLEAR_POSTS,\n  ADD_VOTES,\n  DELETE_VOTE\n} from './types';\nimport db from '../db';\nimport getFileName from '../utils/getFileName';\nimport firebase from '../firebase';\nimport storage from '../storage';\n\n\nexport const fetchAllPosts = () => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    const res = await db.collection('posts').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchUserPosts = (user_id) => async dispatch => {\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    let payload = [];\n    const res = await db.collection('posts').where('user_id', '==', user_id).get()\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchSubredditPosts = (subreddit_id) => async dispatch => {\n  try {\n    dispatch({ type: CLEAR_POSTS });\n    let payload = [];\n    const res = await db.collection('posts').where('subreddit_id', '==', subreddit_id).get();\n    res.forEach(post => {\n      payload.push(post.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchPost = (post_id) => async dispatch => {\n  dispatch({ type: CLEAR_POST });\n  try {\n    let payload = {};\n\n    // Will get Post information\n    await db.collection('posts').doc(post_id).get().then(doc => {\n      payload = doc.data();\n    });\n\n    // Author information\n    const { user_id } = payload;\n    await db.collection('users').doc(user_id).get().then(doc => {\n      payload.author = doc.data();\n    });\n\n    // And comment information\n    payload.comments = [];\n    let res = await db.collection('comments').where('post_id', '==', post_id).get();\n    await res.forEach(doc => {\n      payload.comments.push(doc.data());\n    });\n\n    dispatch({\n      type: GET_POST,\n      payload\n    })\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const createPost = (newPost) => async dispatch => {\n  // generate an auto id\n  let postsDoc = db.collection('posts').doc();\n  let votesDoc = db.collection('votes').doc();\n\n  // create the payload object and populate with important data\n  let postsPayload = {...newPost};\n  postsPayload.id = postsDoc.id;\n  postsPayload.created_at = firebase.firestore.FieldValue.serverTimestamp();\n  postsPayload.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  postsPayload.user_id = firebase.auth().currentUser.uid;\n\n  // create votes collection when a post is created\n  let votesPayload = { votes: 1 };\n  votesPayload.user_upvotes = [];\n  votesPayload.user_downvotes = [];\n  votesPayload.id = votesDoc.id;\n  votesPayload.subreddit_id = postsPayload.subreddit_id;\n  votesPayload.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  votesPayload.user_upvotes.push(firebase.auth().currentUser.uid);\n  votesPayload.post_id = postsPayload.id;\n\n  try {\n    // create a post in firebase with the id created\n    await db.collection('posts').doc(postsPayload.id).set( postsPayload );\n\n    // create a vote in firebase with the id created\n    await db.collection('votes').doc(votesPayload.id).set( votesPayload );\n\n    // add it to the redux store\n    dispatch({\n      type: CREATE_POST,\n      payload: postsPayload\n    });\n    dispatch({\n      type: ADD_VOTES,\n      payload: votesPayload\n    })\n    dispatch({})\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const updatePost = (post_id, body) => async dispatch => {\n  try {\n    let updatedPost = {...body};\n    let payload;\n    updatedPost.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n    await db.collection('posts').doc(post_id).update(updatedPost);\n\n    await db.collection('posts').doc(post_id).get().then(doc => {\n      payload = doc.data();\n    });\n\n    dispatch({ type: CLEAR_POST });\n    dispatch({\n      type: UPDATE_POST,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const deletePost = (post_id, vote_id) => async dispatch => {\n  try {\n    // delete associated comments\n    await db.collection('comments').where('post_id', '==', post_id).get().then(querySnapshot => {\n      let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n    })\n\n    let fileRef;\n    await db.collection('posts').doc(post_id).get().then(doc => {\n      fileRef = doc.data().fileRef;\n    });\n    // if fileRef exists, delete fileRef from storage\n    if (fileRef !== '') {\n      const storageRef = storage.ref();\n      // get post.fileRef\n      const imageName = getFileName(fileRef);\n      const imageRef = storageRef.child(imageName)\n      await imageRef.delete();\n    }\n\n    // delete the Post doc associated with the id\n    await db.collection('posts').doc(post_id).delete();\n    dispatch({\n      type: DELETE_POST,\n      payload: post_id\n    });\n\n    // delete the Votes doc associated with posts\n    await db.collection('votes').where('post_id', '==', post_id).get().then(querySnapshot => {\n      let batch = db.batch();\n\n        querySnapshot.forEach(doc => {\n          batch.delete(doc.ref);\n        });\n\n        return batch.commit();\n    });\n    dispatch({\n      type: DELETE_VOTE,\n      payload: vote_id\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dateFormatter from '../../utils/dateFormatter';\nimport getDocById from '../../utils/getDocById';\nimport getTextPreview from '../../utils/getTextPreview';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nimport MarkedText from '../layout/MarkedText';\n\nimport { connect } from 'react-redux';\nimport { upvote, downvote } from '../../actions/votes';\nimport { deletePost } from '../../actions/posts';\n\nconst MobileCard = ({\n  post,\n  users,\n  votes,\n  currentUser,\n  subreddits\n}) => {\n  const author = getDocById(users, post.user_id);\n  const subreddit = getDocById(subreddits, post.subreddit_id);\n  let vote = getDocById(votes, post.id);\n\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n\n  return (\n    <div className=\"my-6 card mobile-card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n            <img\n              src={imageSrc}\n              alt=\"\"\n            />\n          </a>\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              {author !== undefined && <img src={author.image} alt=\"\" />}\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <Link to={`/r/${subreddit.name}/${post.id}`}>\n              <p className=\"title is-6\">{post.title}</p>\n            </Link>\n            {\n              author !== undefined && (\n                <Link to={`/u/${author.id}`}>\n                  <p className=\"subtitle is-7\">{author.name}</p>\n                </Link>\n              )\n            }\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {\n            post.desc && (\n              <div className=\"mb-3\">\n                <MarkedText>{getTextPreview(post.desc)}</MarkedText>\n              </div>\n            )\n          }\n          <p className=\"is-size-7 mb-0\">\n            { subreddit && <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link> }\n          </p>\n          <p className=\"is-size-7 mt-0 mb-0\">\n            Created { dateFormatter(post.created_at.seconds) }\n          </p>\n          <p className=\"is-size-7 mt-0\">\n            Updated { dateFormatter(post.updated_at.seconds) }\n          </p>\n        </div>\n      </div>\n      {\n        currentUser.id === post.user_id && (\n          <button className=\"delete-button\" onClick={() => deletePost(post.id, vote.id)}>X</button>\n        )\n      }\n      {\n        vote !== undefined && (\n          <div className=\"card-footer\">\n            <div className=\"card-footer-item\">\n              <button\n                className={`button is-success is-small ${vote.user_upvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n                disabled={Object.entries(currentUser).length === 0}\n                onClick={() => upvote(vote.id, post.id, currentUser.id)}\n              >\n                Upvote\n              </button>\n            </div>\n            <div className=\"card-footer-item\">\n              <span className=\"vote-amount my-1\">{ vote.votes }</span>\n            </div>\n            <div className=\"card-footer-item\">\n              <button\n                className={`button is-danger is-small ${vote.user_downvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n                disabled={Object.entries(currentUser).length === 0}\n                onClick={() => downvote(vote.id, post.id, currentUser.id)}\n              >\n                Downvote\n              </button>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nMobileCard.propTypes = {\n  post: PropTypes.object,\n  users: PropTypes.array,\n  subreddits: PropTypes.array,\n  votes: PropTypes.array,\n  currentUser: PropTypes.object,\n  upvote: PropTypes.func.isRequired,\n  downvote: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  null,\n  { upvote, downvote, deletePost }\n)(MobileCard);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isMobile } from 'react-device-detect';\n\nimport Container from '../layout/Container';\nimport PostMedia from './PostMedia';\nimport MobileCard from '../mobile/MobileCard';\n\nconst AllPosts = ({\n  posts,\n  users,\n  subreddits,\n  currentUser,\n  votes\n}) => {\n  return (\n    <Container>\n      <h1 className=\"has-text-centered is-title\">Check out the latest posts</h1>\n      {\n        posts.length !== 0 && (\n          posts.map(post => {\n            return isMobile ? (\n              <MobileCard\n                key={post.id}\n                post={post}\n                users={users}\n                subreddits={subreddits}\n                votes={votes}\n                currentUser={currentUser}\n              />\n            ) : (\n              <PostMedia\n                key={post.id}\n                post={post}\n                users={users}\n                subreddits={subreddits}\n                votes={votes}\n                currentUser={currentUser}\n              />\n            )\n          })\n        )\n      }\n    </Container>\n  )\n}\n\nAllPosts.propTypes = {\n  posts: PropTypes.array,\n  users: PropTypes.array,\n  subreddits: PropTypes.array,\n  votes: PropTypes.array,\n  currentUser: PropTypes.object,\n}\n\nexport default AllPosts;","import {\n  GET_USERS,\n  GET_USER,\n  CLEAR_USER\n} from './types';\nimport db from '../db';\n\n\nexport const fetchUsers = () => async dispatch => {\n  let payload = [];\n  try {\n    const res = await db.collection('users').get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    dispatch({\n      type: GET_USERS,\n      payload\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\nexport const fetchUser = (id) => async dispatch => {\n  let payload;\n  try {\n    dispatch({ type: CLEAR_USER });\n    await db.collection('users').doc(id).get().then(doc => {\n      payload = doc.data();\n    });\n    dispatch({\n      type: GET_USER,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Hero from '../layout/Hero';\nimport AllPosts from './AllPosts';\n\nimport { connect } from 'react-redux';\nimport { login } from '../../actions/auth';\nimport { fetchAllPosts } from '../../actions/posts';\nimport { fetchUsers } from '../../actions/users';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { fetchVotes } from '../../actions/votes';\n\nconst Index = ({\n  login,\n  fetchAllPosts,\n  fetchSubreddits,\n  fetchVotes,\n  fetchUsers,\n  posts: { posts },\n  auth: { currentUser, isLoggedIn },\n  users: { users },\n  subreddits: { subreddits },\n  votes: { votes }\n}) => {\n  useEffect(() => {\n    fetchAllPosts();\n    fetchSubreddits();\n    fetchUsers();\n    fetchVotes();\n  }, [\n    fetchAllPosts,\n    fetchSubreddits,\n    fetchUsers,\n    fetchVotes\n  ])\n  return (\n    <section>\n      <Hero color=\"lightblue\" large>\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Reggit\n            </h1>\n            <h2 className=\"subtitle\">\n              Welcome to the front page of Dave Regg's internet!\n            </h2>\n            { !isLoggedIn && <button className=\"button is-outlined\" onClick={() => login()}>Login</button> }\n          </div>\n        </div>\n      </Hero>\n      <AllPosts\n        posts={posts.slice(0,25)}\n        users={users}\n        subreddits={subreddits}\n        votes={votes}\n        currentUser={currentUser}\n      />\n    </section>\n  )\n}\n\nIndex.propTypes = {\n  login: PropTypes.func.isRequired,\n  fetchAllPosts: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  auth: PropTypes.object,\n  subreddits: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  posts: state.posts,\n  users: state.users,\n  subreddits: state.subreddits,\n  votes: state.votes\n})\n\nexport default connect(\n  mapStateToProps,\n{\n  login,\n  fetchVotes,\n  fetchAllPosts,\n  fetchSubreddits,\n  fetchUsers,\n}\n)(Index);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dateFormatter from '../../utils/dateFormatter';\nimport getPreviewText from '../../utils/getTextPreview';\n\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\nimport MarkedText from '../layout/MarkedText';\nimport Votes from './Votes';\n\nconst PostCard = ({\n  deletePost,\n  currentUser,\n  subreddit,\n  post,\n  author,\n  postVotes\n}) => {\n  const {\n    voteId,\n    userUpvotes,\n    userDownvotes,\n    votes\n  } = postVotes;\n  const vote_id = voteId;\n  const post_id = post.id;\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit}/${post.id}`;\n  }\n\n  return (\n    <div className=\"media\" key={post_id}>\n      <div className=\"media-left align-center\">\n        <Votes\n          voteId={vote_id}\n          postId={post_id}\n          votes={votes}\n          userUpvotes={userUpvotes}\n          userDownvotes={userDownvotes}\n          currentUser={currentUser}\n        />\n      </div>\n      <div className=\"media-left align-center\">\n        <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n          <figure className=\"image is-128x128 center-image border-image\">\n            <img\n              src={imageSrc}\n              alt=\"\"\n            />\n          </figure>\n        </a>\n      </div>\n      <div className=\"media-content post-content\">\n        <p className=\"has-text-weight-bold\">\n          <Link to={`/r/${subreddit}/${post_id}`}><div className='post-title'>{post.title}</div></Link>\n        </p>\n        {\n          post.desc !== '' && (\n            <div className=\"mb-3\">\n              <MarkedText>{getPreviewText(post.desc)}</MarkedText>\n            </div>\n          )\n        }\n        <div className=\"level is-size-7\">\n          <div className=\"level-right\">\n            <div className=\"level-item\">\n              <span className=\"has-text-weight-bold mr-1\">Updated:</span> { dateFormatter(post.updated_at.seconds) }\n            </div>\n            <div className=\"level-item\">\n              <figure className=\"image is-24x24 mr-2 mb-0\">\n                <img className=\"is-rounded\" src={author.image} alt=\"\" />\n              </figure>\n              <Link to={`/u/${author.id}`}>{ author.name }</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        post.user_id === currentUser.id && (\n          <div className=\"media-right\">\n            <button className=\"delete\" onClick={() => deletePost(post_id, vote_id)}>X</button>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nPostCard.propTypes = {\n  deletePost: PropTypes.func,\n  post: PropTypes.object,\n  author: PropTypes.object.isRequired,\n  currentUser: PropTypes.object,\n  postVotes: PropTypes.object.isRequired,\n}\n\nexport default PostCard;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isMobile } from 'react-device-detect';\n\nimport PostCard from './PostCard';\nimport MobileCard from '../mobile/MobileCard';\n\nconst Posts = ({\n  search,\n  subreddit,\n  deletePost,\n  currentUser,\n  subreddits,\n  users,\n  votes,\n  posts\n}) => {\n\n  // Ordering posts by Vote or New\n  const [ sortByVote, toggleSortByVote ] = useState(false);\n  const [ sortByNew, toggleSortByNew ] = useState(true);\n\n  const orderByVotes = posts => {\n    let postVotes = posts.map(post => getVoteByPostId(post.id));\n    let orderedVotes = postVotes.sort((a, b) => {\n      return b.votes - a.votes;\n    });\n    return orderedVotes.map(vote => {\n      if (vote) {\n        return getPostByVoteId(vote.post_id);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  const handleSortByVote = () => {\n    toggleSortByVote(true);\n    toggleSortByNew(false);\n  }\n  const handleSortByNew = () => {\n    toggleSortByNew(true);\n    toggleSortByVote(false);\n  }\n\n  // Filtering posts through the search bar\n  const filterPosts = posts => {\n    if (search !== '') {\n      const regex = new RegExp(search, 'gi');\n      return posts.filter(post => {\n        return (post.title + post.desc).match(regex)\n      });\n    }\n    return posts;\n  }\n\n  // Getters\n  const getAuthor = (id) => {\n    return users.filter(user => user.id === id)[0];\n  }\n  const getVoteByPostId = post_id => {\n    return votes.filter(doc => doc.post_id === post_id)[0];\n  }\n  const getPostByVoteId = post_id => {\n    return posts.filter(doc => doc.id === post_id)[0];\n  }\n\n  return (\n    <section>\n      <div className=\"buttons mb-5\">\n        <button\n          className={`mr-3 is-small button is-primary ${sortByVote && `is-light`}`}\n          onClick={() => handleSortByVote()}\n          disabled={sortByVote}\n        >\n          Sort By Most Votes\n        </button>\n        <button\n          className={`ml-5 is-small button is-primary ${sortByNew && `is-light`}`}\n          onClick={() => handleSortByNew()}\n          disabled={sortByNew}\n        >\n          Sort By New\n        </button>\n      </div>\n      <div>\n        {\n          posts ? sortByVote ? (\n            orderByVotes(posts).map(post => {\n              // vote information\n              let postVotes = {\n                voteId: '',\n                userUpvotes: [],\n                userDownvotes: [],\n                votes: 0\n              }\n              postVotes.voteId = getVoteByPostId(post.id) !== undefined && getVoteByPostId(post.id).id;\n              postVotes.votes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).votes : '0';\n              postVotes.userUpvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_upvotes : [];\n              postVotes.userDownvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_downvotes : [];\n\n              // author information\n              let author = getAuthor(post.user_id) !== undefined ? getAuthor(post.user_id) : { name: 'Anonymous', image: 'https://bulma.io/images/placeholders/96x96.png', id: 'rand0mnumb3rgen3r4t0r' }\n\n              return isMobile ? (\n                <MobileCard\n                  key={post.id}\n                  post={post}\n                  users={users}\n                  subreddits={subreddits}\n                  votes={votes}\n                  currentUser={currentUser}\n                />\n              ) : (\n                <PostCard\n                  key={post.id}\n                  currentUser={currentUser}\n                  post={post}\n                  subreddit={subreddit}\n                  author={author}\n                  postVotes={postVotes}\n                />\n              )\n            })\n          ) : (\n            filterPosts(posts).map(post => {\n              // vote information\n              let postVotes = {\n                voteId: '',\n                userUpvotes: [],\n                userDownvotes: [],\n                votes: 0\n              }\n              postVotes.voteId = getVoteByPostId(post.id) !== undefined && getVoteByPostId(post.id).id;\n              postVotes.votes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).votes : '0';\n              postVotes.userUpvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_upvotes : [];\n              postVotes.userDownvotes = getVoteByPostId(post.id) !== undefined ? getVoteByPostId(post.id).user_downvotes : [];\n\n              // author information\n              let author = getAuthor(post.user_id) !== undefined ? getAuthor(post.user_id) : { name: 'Anonymous', image: 'https://bulma.io/images/placeholders/96x96.png' }\n\n              return isMobile ? (\n                <MobileCard\n                  key={post.id}\n                  post={post}\n                  users={users}\n                  subreddits={subreddits}\n                  votes={votes}\n                  currentUser={currentUser}\n                />\n              ) : (\n                <PostCard\n                  key={post.id}\n                  deletePost={deletePost}\n                  currentUser={currentUser}\n                  subreddit={subreddit}\n                  post={post}\n                  author={author}\n                  postVotes={postVotes}\n                />\n              )\n            })\n          ) : (\n            <h1>Loading</h1>\n          )\n        }\n      </div>\n    </section>\n  )\n}\n\nPosts.propTypes = {\n  users: PropTypes.array,\n  votes: PropTypes.array,\n  deletePost: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  search: PropTypes.string,\n  subreddit: PropTypes.string,\n  subreddit_id: PropTypes.string,\n  subreddits: PropTypes.array,\n}\n\nexport default Posts;","export default function(url) {\n  return url.match(/(png|jpg|jpeg|gif|svg)$/);\n}","import { useState, useEffect } from 'react';\nimport storage from '../storage';\n\nconst useStorage = (file) => {\n  const [ progress, setProgress ] = useState(0);\n  const [ error, setError ] = useState(null);\n  const [ url, setUrl ] = useState(null);\n\n  useEffect(() => {\n    const storageRef = storage.ref(file.name);\n\n    storageRef.put(file).on('state_changed', snapshot => {\n      let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      setUrl(url);\n    });\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../../hooks/useStorage';\nimport PropTypes from 'prop-types';\n\nconst ProgressBar = ({\n  file,\n  input,\n  setInput,\n  setImageFile\n}) => {\n  const { url, progress } = useStorage(file);\n  useEffect(() => {\n    if (url) {\n      setInput({\n        ...input,\n        fileRef: url\n      });\n      setImageFile(null);\n    }\n  }, [\n    url,\n    input,\n    setInput,\n    setImageFile\n  ]);\n  return (\n    <div style={{\n      width: progress + '%',\n      height: '7px',\n      backgroundColor: 'pink'\n    }}></div>\n  )\n}\n\nProgressBar.propTypes = {\n  file: PropTypes.object,\n  input: PropTypes.object,\n  setInput: PropTypes.func.isRequired,\n  setImageFile: PropTypes.func.isRequired,\n}\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport storage from '../../storage';\nimport getFileName from '../../utils/getFileName';\nimport isImage from '../../utils/isImage';\n\nimport MarkedText from '../layout/MarkedText';\nimport ProgressBar from './ProgressBar';\n\nimport { connect } from 'react-redux';\nimport { createPost } from '../../actions/posts';\n\nconst PostForm = ({\n  createPost,\n  toggleShowForm,\n  subreddit\n}) => {\n  const [ input, setInput ] = useState({\n    title: '',\n    desc: '',\n    image: '',\n    url: '',\n    fileRef: ''\n  });\n  const { title, desc, image, url, fileRef } = input;\n  const [ imageFile, setImageFile ] = useState(null);\n  const [ uploadFile, toggleUploadFile ] = useState(false);\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n\n  const fileChange = event => {\n    // uploads the file to firebase storage\n    let newFile = event.target.files[0];\n    \n    if (newFile && isImage(newFile.type)) {\n      setImageFile(newFile);\n    }\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let newImage = image;\n    let newUrl = url;\n    let newFileRef = fileRef;\n    let imageRef;\n    if (fileRef !== '') {\n      const fileName = getFileName(fileRef);\n      const storageRef = storage.ref();\n      imageRef = storageRef.child(fileName);\n    }\n\n    if (newImage !== '') {\n      if (isImage(newImage)) {\n        newUrl = '';\n\n        // delete file and fileRef        \n        newFileRef = '';\n        if (fileRef !== '') imageRef.delete();\n      } else {\n        newUrl = newImage;\n\n        // delete file and fileRef\n        newFileRef = '';\n        if (fileRef !== '') imageRef.delete();\n      }\n    }\n\n    if (newUrl !== '') {\n      newFileRef = '';\n      newImage = '';\n      if (fileRef !== '') imageRef.delete();\n    }\n\n    if (newFileRef !== '') {\n      newImage = '';\n      newUrl = '';\n    }\n\n    let newPost = {\n      title,\n      desc,\n      image: newImage,\n      url: newUrl,\n      fileRef: newFileRef,\n      subreddit_id: subreddit.id\n    }\n    \n    createPost(newPost);\n    setInput({\n      title: '',\n      desc: '',\n      url: '',\n      image: '',\n      file: null\n    });\n    toggleShowForm(false);\n  }\n\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-three-fifths\">\n        <div className=\"panel\">\n          <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  placeholder=\"Title\"\n                  type=\"text\"\n                  value={title}\n                  name=\"title\"\n                  required\n                  onChange={event => handleChange(event)}\n                />\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              className=\"button is-info is-small mb-3\"\n              onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n            >\n              {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n            </button>\n\n            <div className=\"field\">\n              <div className=\"control\">\n                {\n                  previewMarkdown ? (\n                    <div className=\"preview-markdown\">\n                      <MarkedText>{desc}</MarkedText>\n                    </div>\n                  ) : (\n                    <textarea\n                      className=\"textarea\"\n                      placeholder=\"Desc\"\n                      type=\"text\"\n                      value={desc}\n                      name=\"desc\"\n                      onChange={event => handleChange(event)}\n                    >\n                    </textarea>\n                  )\n                }\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              className=\"button is-small mb-3 is-link\"\n              onClick={() => toggleUploadFile(!uploadFile)}\n            >\n              { uploadFile ? 'Add URL' : 'Upload Image' }\n            </button>\n            {\n              uploadFile ? (\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input\n                      disabled={url.length !== 0 || image.length !== 0}\n                      type=\"file\"\n                      onChange={event => fileChange(event)}\n                    />\n                    <div>\n                      {\n                        imageFile && (\n                          <ProgressBar\n                            file={imageFile}\n                            setImageFile={setImageFile}\n                            input={input}\n                            setInput={setInput}\n                          />\n                        )\n                      }\n                    </div>\n                  </div>\n                  <p className=\"help\">You will <span className=\"has-text-weight-bold\">delete</span> your upload if you add a URL.</p>\n                </div>\n              ) : (\n                <>\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <input\n                        className=\"input\"\n                        placeholder=\"URL\"\n                        type=\"text\"\n                        value={url}\n                        name=\"url\"\n                        onChange={event => handleChange(event)}\n                        disabled={image.length !== 0}\n                      />\n                    </div>\n                    <p className=\"help\">You may only link to an image <span className=\"has-text-weight-bold\">or</span> a website</p>\n                  </div>\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <input\n                        className=\"input\"\n                        placeholder=\"Image\"\n                        type=\"text\"\n                        value={image}\n                        name=\"image\"\n                        onChange={event => handleChange(event)}\n                        disabled={url.length !== 0}\n                      />\n                    </div>\n                    <p className=\"help\">You may only link to an image <span className=\"has-text-weight-bold\">or</span> a website</p>\n                  </div>\n                </>\n              )\n            }\n            <div className=\"control\">\n              <button className=\"button is-primary\" disabled={imageFile}>Create Post</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPostForm.propTypes = {\n  createPost: PropTypes.func.isRequired,\n  toggleShowForm: PropTypes.func,\n  subreddit: PropTypes.object.isRequired\n}\n\nexport default connect(\n  null,\n  { createPost }\n)(PostForm);","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Container from '../layout/Container';\nimport Hero from '../layout/Hero';\nimport Posts from './Posts';\nimport PostForm from './PostForm';\n\nimport { connect } from 'react-redux';\nimport {\n  fetchSubreddits,\n  fetchSubreddit,\n  deleteSubreddit\n} from '../../actions/subreddits';\nimport {\n  deletePost,\n  fetchSubredditPosts\n} from '../../actions/posts';\nimport { fetchUsers } from '../../actions/users';\nimport {\n  fetchVotes\n} from '../../actions/votes';\nimport { login } from '../../actions/auth';\n\n\nconst Subreddit = ({\n  fetchSubredditPosts,\n  fetchSubreddits,\n  fetchSubreddit,\n  fetchUsers,\n  fetchVotes,\n  deletePost,\n  deleteSubreddit,\n  subreddits: { subreddits, subreddit, isLoading },\n  auth: { currentUser, isLoggedIn },\n  users: { users },\n  votes: { votes },\n  posts: { posts }\n}) => {\n  let name = useParams();\n  let history = useHistory();\n  useEffect(() => {\n    fetchSubreddit(name);\n    fetchSubreddits();\n    fetchUsers();\n    fetchVotes();\n  }, [\n    fetchSubreddit,\n    fetchSubreddits,\n    fetchUsers,\n    fetchVotes,\n    name\n  ]);\n  useEffect(() => {\n    if (subreddit !== null) fetchSubredditPosts(subreddit.id)\n  }, [fetchSubredditPosts, subreddit])\n  \n  // Create post form\n  let [showForm, toggleShowForm] = useState(false);\n\n  // Search form\n  let [search, setSearch] = useState('');\n  const handleChange = (event) => {\n    setSearch(event.target.value);\n  }\n\n  return (\n    <section>\n      <Hero\n        small\n      >\n        <div className=\"hero-body\"  style={{backgroundColor: 'black', color: 'white'}}>\n          <div className=\"container\">\n            <h1 className=\"title is-capitalized\" style={{color: 'white'}}>Inscriptions of Temple Sacrifice</h1>\n            <h4 style={{fontWeight: 300, color: 'white', lineHeight: 1.3}}>Cast Votes on Temple Offerings to Help Templars<br />Discover Top Fire Ritual Candidates</h4>\n            {/* {\n              (isLoading || subreddit === null) ? (\n                <h1 className=\"title\">Loading...</h1>\n              ) : (!isLoading && Object.keys(subreddit).length === 0) ? (\n                <>\n                  <h1 className=\"is-capitalized\">\n                    This Subreddit does not exist yet\n                  </h1>\n                  <p className=\"button is-warning\">Create it Here</p>\n                </>\n              ) : (\n                <h1 className=\" title is-capitalized\">{ subreddit.name }</h1>\n              )\n            } */}\n            {/* {\n              (subreddit !== null && currentUser.id === subreddit.user_id) && (\n                <button className=\"button is-danger\" onClick={() => deleteSubreddit(subreddit.id, history)}>Delete Subreddit</button>\n              )\n            } */}\n          </div>\n        </div>\n      </Hero>\n      <Container>\n        {\n          isLoggedIn ? (\n            <button\n              className=\"button is-primary\"\n              onClick={() => toggleShowForm(!showForm)}\n            >\n              { showForm ? ('Cancel') : ('Inscribe an Offering') }\n            </button>\n          ) : \n          <div>Sign In to Inscribe an Offering</div>\n        }\n        {\n          showForm && (\n            <PostForm\n              toggleShowForm={toggleShowForm}\n              subreddit={subreddit}\n            />\n          )\n        }\n        <form className=\"form\">\n          <div className=\"control\" style={{width: 400}}>\n            <input\n              type=\"text\"\n              className=\"input search-box\"\n              placeholder=\"Search\"\n              value={search}\n              onChange={event => handleChange(event)}\n            />\n          </div>\n        </form>\n        {\n          (posts.length !== 0 && subreddit !== null) && (\n          <Posts\n            users={users}\n            votes={votes}\n            search={search}\n            subreddit={subreddit.name}\n            subreddit_id={subreddit.id}\n            deletePost={deletePost}\n            posts={posts}\n            currentUser={currentUser}\n            subreddits={subreddits}\n          />\n        )}\n      </Container>\n    </section>\n  )\n}\n\nSubreddit.propTypes = {\n  fetchSubredditPosts: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchSubreddit: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  deleteSubreddit: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  posts: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  subreddits: state.subreddits,\n  posts: state.posts,\n  users: state.users,\n  votes: state.votes,\n  auth: state.auth\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    deletePost,\n    deleteSubreddit,\n    fetchUsers,\n    fetchVotes,\n    fetchSubredditPosts,\n    fetchSubreddits,\n    fetchSubreddit\n  }\n)(Subreddit);","import { format } from 'date-fns';\n\nexport default function(timeInSeconds) {\n  if (timeInSeconds === undefined) return 'New Comment!';\n  const timeInMilliseconds = timeInSeconds * 1000;\n  return format(new Date(timeInMilliseconds), 'MM-dd-yyyy HH:mm')\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport storage from '../../storage';\nimport getFileName from '../../utils/getFileName';\nimport isImage from '../../utils/isImage';\n\nimport ProgressBar from '../subreddit/ProgressBar';\nimport MarkedText from '../layout/MarkedText';\n\nimport { connect } from 'react-redux';\nimport { updatePost } from '../../actions/posts';\n\nconst UpdateForm = ({\n  updatePost,\n  toggleShowForm,\n  oldTitle,\n  oldDesc,\n  oldUrl,\n  oldImage,\n  oldFileRef,\n  post_id\n}) => {\n  const [ input, setInput ] = useState({\n    title: oldTitle,\n    desc: oldDesc,\n    url: oldUrl,\n    image: oldImage,\n    fileRef: oldFileRef\n  });\n  let { title, desc, url, image, fileRef } = input;\n\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n  const [ imageFile, setImageFile ] = useState(null);\n  const [ uploadFile, toggleUploadFile ] = useState(false);\n\n  const handleChange = (event) => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n\n  const fileChange = event => {\n    // uploads the file to firebase storage\n    let newFile = event.target.files[0];\n    \n    if (newFile && isImage(newFile.type)) {\n      setImageFile(newFile);\n    }\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let newUrl = url;\n    let newImage = image;\n    let newFileRef = fileRef;\n    let imageRef;\n    \n    if (fileRef !== '') {\n      const fileName = getFileName(fileRef);\n      const storageRef = storage.ref();\n      imageRef = storageRef.child(fileName);\n    }\n\n    if (newImage !== '') {\n      if (isImage(newImage)) {\n        newUrl = '';\n\n        // delete file and fileRef\n        newFileRef = '';\n        if (fileRef !== '') imageRef.delete();\n      } else {\n        newUrl = newImage;\n\n        // delete file and fileRef\n        newFileRef = '';\n        if (fileRef !== '') imageRef.delete();\n      }\n    }\n\n    if (newUrl !== '') {\n      newFileRef = '';\n      newImage = '';\n      if (fileRef !== '') imageRef.delete();\n    }\n\n    if (newFileRef !== '') {\n      newImage = '';\n      newUrl = '';\n    }\n\n    let updatedPost = {\n      image: newImage,\n      url: newUrl,\n      id: post_id,\n      title,\n      fileRef: newFileRef,\n      desc\n    }\n    updatePost(post_id, updatedPost);\n    toggleShowForm(false);\n  }\n\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            placeholder=\"Title\"\n            type=\"text\"\n            value={title}\n            name=\"title\"\n            required\n            onChange={event => handleChange(event)}\n          />\n        </div>\n      </div>\n      <button\n        type=\"button\"\n        className=\"button is-info is-small mb-3\"\n        onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n      >\n        {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n      </button>\n\n      <div className=\"field\">\n        <div className=\"control\">\n          {\n            previewMarkdown ? (\n              <div className=\"preview-markdown\">\n                <MarkedText>{desc}</MarkedText>\n              </div>\n            ) : (\n              <textarea\n                className=\"textarea\"\n                placeholder=\"Desc\"\n                type=\"text\"\n                value={desc}\n                name=\"desc\"\n                onChange={event => handleChange(event)}\n              >\n              </textarea>\n            )\n          }\n        </div>\n      </div>\n      <button\n        type=\"button\"\n        className=\"button is-small mb-3 is-link\"\n        onClick={() => toggleUploadFile(!uploadFile)}\n      >\n        { uploadFile ? 'Add URL' : 'Upload Image' }\n      </button>\n      {\n        uploadFile ? (\n          <div className=\"field\">\n            <div className=\"control\">\n              <input\n                disabled={url.length !== 0 || image.length !== 0}\n                type=\"file\"\n                onChange={event => fileChange(event)}\n              />\n              <div>\n                {\n                  imageFile && (\n                    <ProgressBar\n                      file={imageFile}\n                      setImageFile={setImageFile}\n                      input={input}\n                      setInput={setInput}\n                    />\n                  )\n                }\n              </div>\n            </div>\n            <p className=\"help\">You will <span className=\"has-text-weight-bold\">delete</span> your upload if you add a URL.</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  placeholder=\"URL\"\n                  type=\"text\"\n                  value={url}\n                  name=\"url\"\n                  onChange={event => handleChange(event)}\n                  disabled={image.length !== 0}\n                />\n              </div>\n              <p className=\"help\">You may only link to an image <span className=\"has-text-weight-bold\">or</span> a website</p>\n            </div>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  placeholder=\"Image\"\n                  type=\"text\"\n                  value={image}\n                  name=\"image\"\n                  onChange={event => handleChange(event)}\n                  disabled={url.length !== 0}\n                />\n              </div>\n              <p className=\"help\">You may only link to an image <span className=\"has-text-weight-bold\">or</span> a website</p>\n            </div>\n          </>\n        )\n      }\n      <div className=\"control\">\n        <button className=\"button is-primary\">Update Post</button>\n      </div>\n    </form>\n  )\n}\n\nUpdateForm.propTypes = {\n  updatePost: PropTypes.func.isRequired,\n  oldTitle: PropTypes.string.isRequired,\n  toggleShowForm: PropTypes.func.isRequired,\n  oldDesc: PropTypes.string,\n  oldUrl: PropTypes.string,\n  oldImage: PropTypes.string,\n  post_id: PropTypes.string.isRequired,\n}\n\nexport default connect(\n  null,\n  { updatePost }\n)(UpdateForm);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkedText from '../layout/MarkedText';\n\nconst CommentForm = ({\n  addComment,\n  currentUser,\n  subreddit_id,\n  post_id\n}) => {\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n  const [ input, setInput ] = useState({\n    content: ''\n  });\n  const { content } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let user_id = currentUser.id;\n    let newComment = {\n      ...input,\n      user_id,\n      post_id,\n      subreddit_id,\n      parent_id: null\n    }\n    addComment(newComment);\n    setInput({ content: '' })\n  }\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <button\n        type=\"button\"\n        className=\"button is-info is-small mb-3\"\n        onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n      >\n        {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n      </button>\n\n      <div className=\"field\">\n        <div className=\"control\">\n          {\n            previewMarkdown ? (\n              <div className=\"preview-markdown\">\n                <MarkedText>{content}</MarkedText>\n              </div>\n            ) : (\n              <textarea\n                className=\"textarea\"\n                placeholder=\"Comment\"\n                type=\"text\"\n                value={content}\n                name=\"content\"\n                onChange={event => handleChange(event)}\n              >\n              </textarea>\n            )\n          }\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary\">Comment</button>\n      </div>\n    </form>\n  )\n}\n\nCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  post_id: PropTypes.string,\n  subreddit_id: PropTypes.string,\n}\n\nexport default CommentForm;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkedText from '../layout/MarkedText';\n\nconst ReplyForm = ({\n  currentUser,\n  toggleReplyForm,\n  subreddit_id,\n  comment_id,\n  addComment,\n  post_id\n}) => {\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n  const [ input, setInput ] = useState({\n    content: ''\n  });\n  const { content } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    });\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let user_id = currentUser.id;\n    let newComment = {\n      ...input,\n      user_id,\n      post_id,\n      subreddit_id,\n      parent_id: comment_id\n    }\n    addComment(newComment);\n    setInput({ content: '' });\n    toggleReplyForm(false);\n  }\n  return (\n    <form className=\"post-form\" onSubmit={event => handleSubmit(event)}>\n      <button\n        type=\"button\"\n        className=\"button is-info is-small mb-3\"\n        onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n      >\n        {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n      </button>\n\n      <div className=\"field\">\n        <div className=\"control\">\n          {\n            previewMarkdown ? (\n              <div className=\"preview-markdown\">\n                <MarkedText>{content}</MarkedText>\n              </div>\n            ) : (\n              <textarea\n                className=\"textarea\"\n                placeholder=\"Comment\"\n                type=\"text\"\n                value={content}\n                name=\"content\"\n                onChange={event => handleChange(event)}\n              >\n              </textarea>\n            )\n          }\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary is-small\">Comment</button>\n      </div>\n    </form>\n  )\n}\n\nReplyForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  toggleReplyForm: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  post_id: PropTypes.string,\n  comment_id: PropTypes.string,\n  subreddit_id: PropTypes.string,\n}\n\nexport default ReplyForm;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkedText from '../layout/MarkedText';\n\nconst UpdateCommentForm = ({\n  comment_id,\n  oldContent,\n  updateComment,\n  toggleUpdateForm,\n}) => {\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n  const [ input, setInput ] = useState({\n    content: oldContent\n  });\n  const { content } = input;\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    })\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    let updatedComment = {\n      content,\n      id: comment_id\n    }\n    updateComment(updatedComment);\n    toggleUpdateForm(false);\n  }\n  return (\n    <form className=\"post-form\" onSubmit={(event) => handleSubmit(event)}>\n      <button\n        type=\"button\"\n        className=\"button is-info is-small mb-3\"\n        onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n      >\n        {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n      </button>\n\n      <div className=\"field\">\n        <div className=\"control\">\n          {\n            previewMarkdown ? (\n              <div className=\"preview-markdown\">\n                <MarkedText>{content}</MarkedText>\n              </div>\n            ) : (\n              <textarea\n                className=\"textarea\"\n                placeholder=\"Comment\"\n                type=\"text\"\n                value={content}\n                name=\"content\"\n                onChange={event => handleChange(event)}\n              >\n              </textarea>\n            )\n          }\n        </div>\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-primary is-small\">Update</button>\n      </div>\n    </form>\n  )\n}\n\nUpdateCommentForm.propTypes = {\n  comment_id: PropTypes.string,\n  oldContent: PropTypes.string,\n  toggleUpdateForm: PropTypes.func.isRequired,\n  updateComment: PropTypes.func.isRequired,\n}\n\nexport default UpdateCommentForm;","import {\n  GET_COMMENTS,\n  ADD_COMMENT,\n  UPDATE_COMMENT,\n  DELETE_COMMENT,\n  CLEAR_COMMENTS\n} from './types';\nimport db from '../db';\nimport firebase from '../firebase';\n\nexport const fetchAllComments = () => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n\n    const res = await db.collection('comments').get()\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const fetchUserComments = user_id => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n    const res = await db.collection('comments').where('user_id', '==', user_id).get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    })\n  } catch (error) {\n    \n  }\n}\n\n\nexport const fetchPostComments = post_id => async dispatch => {\n  let payload = [];\n  try {\n    dispatch({ type: CLEAR_COMMENTS });\n    const res = await db.collection('comments').where('post_id', '==', post_id).get();\n    res.forEach(doc => {\n      payload.push(doc.data());\n    });\n    payload = payload.sort((obj1, obj2) => {\n      return obj2.created_at - obj1.created_at\n    });\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\n\nexport const addComment = (body) => async dispatch => {\n  // Create an ID for the comment\n  let newDoc = db.collection('comments').doc();\n\n  // Create the newComment to be sent to the database\n  let newComment = {...body};\n  newComment.id = newDoc.id;\n  newComment.created_at = firebase.firestore.FieldValue.serverTimestamp();\n  newComment.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n  try {\n    await db.collection('comments').doc(newComment.id).set(newComment);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: newComment\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const updateComment = body => async dispatch => {\n  let payload;\n  try {\n    let updatedComment = {...body};\n    updatedComment.updated_at = firebase.firestore.FieldValue.serverTimestamp();\n\n    await db.collection('comments').doc(updatedComment.id).update(updatedComment);\n    await db.collection('comments').doc(updatedComment.id).get().then(doc => {\n      payload = doc.data();\n    });\n    \n    dispatch({\n      type: UPDATE_COMMENT,\n      payload\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\n\nexport const deleteComment = (comment_id) => async dispatch => {\n  try {\n    await db.collection('comments').doc(comment_id).delete();\n    dispatch({\n      type: DELETE_COMMENT,\n      payload: comment_id\n    });\n  } catch (error) {\n    console.error(error.message);\n  }\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport UpdateCommentForm from '../updateComment/UpdateCommentForm';\n\nimport { connect } from 'react-redux';\nimport {\n  updateComment,\n  deleteComment\n} from '../../actions/comments';\n\nconst CommentReply = ({\n  updateComment,\n  deleteComment,\n  comment,\n  currentUser\n}) => {\n  const [ updateForm, toggleUpdateForm ] = useState(false);\n\n  let author = {\n    name: 'Anonymous',\n    image: 'https://bulma.io/images/placeholders/96x96.png'\n  }\n  if (comment.author !== undefined) {\n    author.name = comment.author.name;\n    author.image = comment.author.image;\n  }\n  return (\n    <div className=\"media my-2\">\n      <div className=\"media-left\">\n        <figure className=\"image\">\n          <img\n            alt=\"user avatar\"\n            src={author.image}\n          />\n        </figure>\n      </div>\n      <div className=\"media-content\">\n        <p className=\"has-text-weight-bold\">{author.name}</p>\n        <p>{comment.content}</p>\n        <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n          {\n            currentUser.id === comment.user_id && (\n              <button className=\"button is-warning is-small\" onClick={() => toggleUpdateForm(!updateForm)}>Edit</button>\n            )\n          }\n          {\n            updateForm && (\n              <UpdateCommentForm\n                comment_id={comment.id}\n                oldContent={comment.content}\n                updateComment={updateComment}\n                toggleUpdateForm={toggleUpdateForm}\n              />\n            )\n          }\n      </div>\n      {\n        currentUser.id === comment.user_id && (\n          <button onClick={() => deleteComment(comment.id)} className=\"delete\">X</button>\n        )\n      }\n    </div>\n  )\n}\n\nCommentReply.propTypes = {\n  currentUser: PropTypes.object,\n  comment: PropTypes.object,\n  updateComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  null,\n  {\n    updateComment,\n    deleteComment\n  }\n)(CommentReply);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport MarkedText from '../layout/MarkedText';\nimport ReplyForm from './ReplyForm';\nimport CommentReply from './CommentReply';\nimport UpdateCommentForm from '../updateComment/UpdateCommentForm';\n\nimport { connect } from 'react-redux';\nimport {\n  addComment,\n  updateComment,\n  deleteComment\n} from '../../actions/comments';\n\nconst PostComment = ({\n  currentUser,\n  isLoggedIn,\n  deleteComment,\n  addComment,\n  updateComment,\n  users,\n  comment,\n  comments\n}) => {\n  const [ replyForm, toggleReplyForm ] = useState(false);\n  const [ updateForm, toggleUpdateForm ] = useState(false);\n\n  // Get author information for the comment\n  const getAuthorById = user_id => {\n    return users.filter(user => user.id === user_id);\n  }\n  const author = getAuthorById(comment.user_id)[0];\n\n  // Find children comments of the parent comment\n  let childrenComments = [];\n  const getChildrenComments = parent_id => {\n    let tempChildrenComments = comments.filter(comment => comment.parent_id === parent_id);\n    tempChildrenComments.map(comment => {\n      comment.author = users.filter(user => user.id === comment.user_id)[0];\n    });\n    return tempChildrenComments;\n  }\n  childrenComments = getChildrenComments(comment.id);\n\n  const handleToggleUpdateForm = () => {\n    if (replyForm) toggleReplyForm(false);\n    toggleUpdateForm(!updateForm);\n  }\n  const handleToggleReplyForm = () => {\n    if (updateForm) toggleUpdateForm(false);\n    toggleReplyForm(!replyForm);\n  }\n\n  return (\n    <div className=\"comment my-2\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image\">\n            <img\n              alt=\"Author avatar\"\n              src={ author !== undefined && author.image }\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { author !== undefined && author.name }\n          </p>\n          <MarkedText>{comment.content}</MarkedText>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n          {\n            isLoggedIn && (\n              <button className=\"button is-primary is-small\" onClick={() => handleToggleReplyForm()}>Reply</button>\n            )\n          }\n          {\n            currentUser.id === comment.user_id && (\n              <button className=\"button is-warning is-small\" onClick={() => handleToggleUpdateForm()}>Edit</button>\n            )\n          }\n          {\n            replyForm && (\n              <div className=\"media\">\n                  <div className=\"media-content\">\n                    <ReplyForm\n                      addComment={addComment}\n                      currentUser={currentUser}\n                      subreddit_id={comment.subreddit_id}\n                      comment_id={comment.id}\n                      post_id={comment.post_id}\n                      toggleReplyForm={toggleReplyForm}\n                    />\n                  </div>\n              </div>\n            )\n          }\n          {\n            updateForm && (\n              <div className=\"media\">\n                  <div className=\"media-content\">\n                    <UpdateCommentForm\n                      updateComment={updateComment}\n                      comment_id={comment.id}\n                      toggleUpdateForm={toggleUpdateForm}\n                      oldContent={comment.content}\n                    />\n                  </div>\n              </div>\n            )\n          }\n          {\n            ( childrenComments.length !== 0 && childrenComments[0].author !== undefined) && (\n              childrenComments.map(comment => {\n                return (\n                  <CommentReply\n                    key={comment.id}\n                    comment={comment}\n                    currentUser={currentUser}\n                  />\n                )\n              })\n            )\n          }\n        </div>\n        {\n          currentUser.id === comment.user_id && (\n            <div className=\"media-right\">\n              <button className=\"delete\" onClick={() => deleteComment(comment.id)}>X</button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nPostComment.propTypes = {\n  isLoggedIn: PropTypes.bool,\n  users: PropTypes.array,\n  comment: PropTypes.object.isRequired,\n  currentUser: PropTypes.object,\n  addComment: PropTypes.func.isRequired,\n  updateComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  null,\n  {\n    addComment,\n    updateComment,\n    deleteComment\n  }\n)(PostComment);","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport UpdateCommentForm from '../updateComment/UpdateCommentForm';\nimport MarkedText from '../layout/MarkedText';\n\nimport { connect } from 'react-redux';\nimport {\n  updateComment,\n  deleteComment\n} from '../../actions/comments';\n\nconst MobileCommentReply = ({\n  updateComment,\n  deleteComment,\n  comment,\n  currentUser\n}) => {\n  const [ updateForm, toggleUpdateForm ] = useState(false);\n  let author = {\n    id: 'st1llw0rk1ng',\n    name: 'Anonymous',\n    image: 'https://bulma.io/images/placeholders/96x96.png'\n  }\n  if (comment.author !== undefined) {\n    author.name = comment.author.name;\n    author.image = comment.author.image;\n  }\n  return (\n    <div className=\"card mobile-card\" style={{ width: '92%' }}>\n      <div className=\"card-header\">\n        <span className=\"card-header-title\">\n          <figure className=\"mb-0 mr-3 image is-24x24\">\n            <img\n              alt=\"\"\n              className=\"is-rounded\"\n              src={author.image}\n            />\n          </figure>\n          <Link to={`/u/${author.id}`}>{author.name}</Link>\n        </span>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"content\">\n          <MarkedText>{comment.content}</MarkedText>\n          <p className=\"is-size-7 mt-3 mb-0\">\n            <span className=\"is-italic\">Created</span> {commentTimeFormatter(comment.created_at.seconds)}\n          </p>\n          <p className=\"is-size-7 mt-0 mb-0\">\n            <span className=\"is-italic\">Updated</span> {commentTimeFormatter(comment.updated_at.seconds)}\n          </p>\n        </div>\n      </div>\n      {\n        currentUser.id === comment.user_id && (\n          <div className=\"card-footer\" style={{ flexDirection: 'column', alignItems: 'center' }}>\n            <button className=\"button is-warning is-small\" style={{ width: '100%' }} onClick={() => toggleUpdateForm(!updateForm)}>Edit</button>\n            {\n              updateForm && (\n                <UpdateCommentForm\n                  updateComment={updateComment}\n                  oldContent={comment.content}\n                  toggleUpdateForm={toggleUpdateForm}\n                  comment_id={comment.id}\n                />\n              )\n            }\n          </div>\n        )\n      }\n      {\n        currentUser.id === comment.user_id && (\n          <button className=\"delete-button\" onClick={() => deleteComment(comment.id)}>X</button>\n        )\n      }\n    </div>\n  )\n}\n\nMobileCommentReply.propTypes = {\n  updateComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.object,\n  currentUser: PropTypes.object,\n}\n\nexport default connect(\n  null,\n  {\n    updateComment,\n    deleteComment\n  }\n)(MobileCommentReply);","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getDocById from '../../utils/getDocById';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport ReplyForm from '../post/ReplyForm';\nimport MobileCommentReply from './MobileCommentReply';\nimport MarkedText from '../layout/MarkedText';\n\nimport { connect } from 'react-redux';\nimport {\n  addComment,\n  updateComment,\n  deleteComment\n} from '../../actions/comments';\nimport UpdateCommentForm from 'components/updateComment/UpdateCommentForm';\n\nconst MobileComment = ({\n  addComment,\n  updateComment,\n  deleteComment,\n  isLoggedIn,\n  currentUser,\n  comment,\n  users,\n  comments\n}) => {\n  const [ replyForm, toggleReplyForm ] = useState(false);\n  const [ updateForm, toggleUpdateForm ] = useState(false);\n\n  const author = getDocById(users, comment.user_id);\n  let childrenComments = [];\n  const getChildrenComments = parent_id => {\n    let tempChildrenComments = comments.filter(comment => comment.parent_id === parent_id);\n    tempChildrenComments.map(comment => {\n      comment.author = getDocById(users, comment.user_id);\n    });\n    return tempChildrenComments;\n  }\n  childrenComments = getChildrenComments(comment.id);\n\n  const handleToggleUpdateForm = () => {\n    if (replyForm) toggleReplyForm(false);\n    toggleUpdateForm(!updateForm);\n  }\n  const handleToggleReplyForm = () => {\n    if (updateForm) toggleUpdateForm(false);\n    toggleReplyForm(!replyForm);\n  }\n\n  return (\n    <div className=\"card mobile-card\">\n      {\n        author !== undefined && (\n          <div className=\"card-header\">\n            <span className=\"card-header-title\">\n              <figure className=\"mb-0 mr-3 image is-24x24\">\n                <img\n                  className=\"is-rounded\"\n                  alt=\"\"\n                  src={author.image}\n                />\n              </figure>\n              <Link to={`/u/${author.id}`}>{author.name}</Link>\n            </span>\n          </div>\n        )\n      }\n      <div className=\"card-content\">\n        <div className=\"content\">\n          <MarkedText>{ comment.content }</MarkedText>\n          <p className=\"is-size-7 mt-3 mb-0\">\n            <span className=\"is-italic\">Created</span> {commentTimeFormatter(comment.created_at.seconds)}\n          </p>\n          <p className=\"is-size-7 mt-0 mb-0\">\n            <span className=\"is-italic\">Updated</span> {commentTimeFormatter(comment.updated_at.seconds)}\n          </p>\n        </div>\n      </div>\n      {\n        isLoggedIn && (\n          <footer className=\"card-footer\" style={{ flexDirection: 'column', alignItems: 'center' }}>\n            <button className=\"button is-primary is-small\" style={{ width: '100%' }} onClick={() => handleToggleReplyForm()}>Reply</button>\n            {\n              currentUser.id === comment.user_id && (\n                <button className=\"button is-warning is-small\" style={{ width: '100%'}} onClick={() => handleToggleUpdateForm()}>Edit</button>\n              )\n            }\n            {\n              replyForm && (\n                <ReplyForm\n                  addComment={addComment}\n                  currentUser={currentUser}\n                  subreddit_id={comment.subreddit_id}\n                  comment_id={comment.id}\n                  post_id={comment.post_id}\n                  toggleReplyForm={toggleReplyForm}\n                />\n              )\n            }\n            {\n              updateForm && (\n                <UpdateCommentForm\n                  comment_id={comment.id}\n                  oldContent={comment.content}\n                  toggleUpdateForm={toggleUpdateForm}\n                  updateComment={updateComment}\n                />\n              )\n            }\n            {\n              (childrenComments.length !== 0 && childrenComments[0].author !== undefined) && (\n                childrenComments.map(comment => {\n                  return (\n                    <MobileCommentReply\n                      key={comment.id}\n                      comment={comment}\n                      currentUser={currentUser}\n                      deleteComment={deleteComment}\n                    />\n                  )\n                })\n              )\n            }\n          </footer>\n        )\n      }\n      {\n        currentUser.id === comment.user_id && (\n          <button className=\"delete-button\" onClick={() => deleteComment(comment.id)}>X</button>\n        )\n      }\n    </div>\n  )\n}\n\nMobileComment.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  updateComment: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool,\n  currentUser: PropTypes.object,\n  comment: PropTypes.object.isRequired,\n  users: PropTypes.array,\n}\n\nexport default connect(\n  null,\n  {\n    addComment,\n    updateComment,\n    deleteComment\n  }\n)(MobileComment);","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { isMobile } from 'react-device-detect';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\nimport getDocById from '../../utils/getDocById';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nimport Container from '../layout/Container';\nimport Hero from '../layout/Hero';\nimport UpdateForm from './UpdateForm';\nimport CommentForm from './CommentForm';\nimport PostComment from './PostComment';\nimport MarkedText from '../layout/MarkedText';\nimport MobileComment from '../mobile/MobileComment';\n\nimport { connect } from 'react-redux';\nimport { fetchPost, deletePost } from '../../actions/posts';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport {\n  fetchPostComments,\n  addComment\n} from '../../actions/comments';\nimport { fetchUsers } from '../../actions/users';\nimport {\n  fetchPostVote,\n  upvote, \n  downvote\n} from '../../actions/votes';\n\nconst Post = ({\n  fetchPost,\n  fetchUsers,\n  fetchPostVote,\n  fetchSubreddits,\n  fetchPostComments,\n  addComment,\n  deletePost,\n  upvote,\n  downvote,\n  votes: { vote },\n  posts: { post },\n  users: { users },\n  auth: { currentUser, isLoggedIn },\n  subreddits: { subreddits },\n  comments: { comments }\n}) => {\n  const history = useHistory();\n  const { post_id, name } = useParams();\n  useEffect(() => {\n    fetchPost(post_id);\n    fetchSubreddits();\n    fetchPostComments(post_id);\n    fetchUsers();\n    fetchPostVote(post_id);\n  }, [\n    fetchSubreddits,\n    fetchPostComments,\n    fetchPostVote,\n    fetchUsers,\n    fetchPost,\n    post_id\n  ]);\n  const [ showForm, toggleShowForm ] = useState( false );\n  \n  let subreddit_id;\n  if (subreddits.length !== 0) {\n    subreddit_id = getDocById(subreddits, name, 'name').id;\n  }\n\n  let author = {\n    name: 'Anonymous',\n    url: '',\n    image: 'https://bulma.io/images/placeholders/96x96.png',\n    id: 'rand0mnumb3rgen3r4t0r'\n  };\n  if (post !== null) {\n    author = getDocById(users, post.user_id);\n  }\n\n  let imageSrc;\n  let aHref;\n  if (post !== null) {\n    if (post.image !== '') {\n      imageSrc = post.image;\n      aHref = post.image;\n    } else if (post.fileRef !== '') {\n      imageSrc = post.fileRef;\n      aHref = post.fileRef;\n    } else if (post.url !== '') {\n      imageSrc = LinkImage;\n      aHref = post.url;\n    } else {\n      imageSrc = SpeechBubble;\n      aHref = '#!';\n    }\n  }\n\n  return (\n    <section>\n      <Hero medium color='light'>\n        <div className=\"hero-head mt-3\" style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n        <button\n          className={`button is-success is-small ${vote !== null && vote.user_upvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n          disabled={Object.entries(currentUser).length === 0}\n          onClick={() => upvote(vote.id, post_id, currentUser.id, true)}\n        >\n          Upvote\n        </button>\n        { vote !== null && <span className=\"mx-3\">{vote.votes}</span>}\n          <button\n            className={`button is-danger is-small ${vote !== null && vote.user_downvotes.indexOf(currentUser.id) !== -1 && 'is-light'}`}\n            disabled={Object.entries(currentUser).length === 0}\n            onClick={() => downvote(vote.id, post_id, currentUser.id, true)}\n          >\n            Downvote\n          </button>\n        </div>\n        <div className=\"hero-body post-hero-body\">\n          {\n            post !== null && (\n                <figure className=\"image post-image\">\n                <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n                  <img\n                    src={imageSrc}\n                    alt=\"\"\n                  />\n                </a>\n              </figure>\n            )\n          }\n          <h1 className=\"title has-text-centered mb-5\">\n            { post !== null && post.title }\n          </h1>\n          {\n            (post !== null && post.desc) && (\n              <div className=\"subtitle post-content mt-5\">\n                <MarkedText>{post.desc}</MarkedText>\n              </div>\n            )\n          }\n        </div>\n        <div className=\"hero-foot mb-3\">\n          <div className=\"level is-size-7\">\n            <div className=\"level-item has-text-centered mb-0\">\n              <figure className=\"image is-24x24 mr-2\" style={{ marginBottom: 0 }}>\n                <img\n                  className=\"is-rounded\"\n                  src={author.image}\n                  alt=\"\"\n                />\n              </figure>\n              <Link to={`/u/${author.id}`}>\n                <p>\n                  {author.name}\n                </p>\n              </Link>\n            </div>\n            <div className=\"level-item has-text-centered mt-0 mb-0\">\n              <p>\n                Created: { post !== null && commentTimeFormatter(post.created_at.seconds) }\n              </p>\n            </div>\n            <div className=\"level-item has-text-centered mt-0\">\n              <p>\n                Updated: { post !== null && commentTimeFormatter(post.updated_at.seconds) }\n              </p>\n            </div>\n            {\n              (post !== null && currentUser.id === post.user_id) && (\n                <div className=\"level-item has-text-centered mb-0\">\n                  <button className=\"button is-small is-danger\" onClick={() => {deletePost(post.id, vote.id); history.push('/')}}>Delete Post</button>\n                </div>\n              )\n            }\n          </div>\n        </div>\n      </Hero>\n      <Container>\n        {\n          (post !== null && currentUser.id === post.user_id) && (\n            <button\n              className=\"button is-success\"\n              onClick={() => toggleShowForm(!showForm)}\n            >\n              {showForm ? 'Close Form' : 'Edit Post'}\n            </button>\n          )\n        }\n        {\n          (showForm && post !== null) && (\n            <UpdateForm\n              oldImage={post.image}\n              oldTitle={post.title}\n              oldDesc={post.desc}\n              oldUrl={post.url}\n              oldFileRef={post.fileRef}\n              post_id={post.id}\n              toggleShowForm={toggleShowForm}\n            />\n          )\n        }\n        <div className=\"comments\">\n          {\n            (comments.length !== 0) && (\n              comments.map(comment => {\n                return (comment.parent_id === null) && (\n                  isMobile ? (\n                    <MobileComment\n                      key={comment.id}\n                      users={users}\n                      comments={comments}\n                      comment={comment}\n                      currentUser={currentUser}\n                      isLoggedIn={isLoggedIn}\n                    />\n                  ) : (\n                    <PostComment\n                      comment={comment}\n                      comments={comments}\n                      currentUser={currentUser}\n                      isLoggedIn={isLoggedIn}\n                      users={users}\n                      key={comment.id}\n                    />\n                  )\n                )\n              })\n            )\n          }\n          <div className=\"mt-3 comment-form\">\n            <h2 className=\"subtitle\">Add a Comment</h2>\n            <CommentForm\n              addComment={addComment}\n              currentUser={currentUser}\n              post_id={post_id}\n              name={name}\n              subreddit_id={subreddit_id}\n            />\n          </div>\n        </div>\n      </Container>\n    </section>\n  )\n}\n\nPost.propTypes = {\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchPost: PropTypes.func.isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  fetchPostVote: PropTypes.func.isRequired,\n  fetchPostComments: PropTypes.func.isRequired,\n  addComment: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  comments: PropTypes.object,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  upvote: PropTypes.func.isRequired,\n  downvote: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  subreddits: state.subreddits,\n  comments: state.comments,\n  users: state.users,\n  posts: state.posts,\n  auth: state.auth,\n  votes: state.votes\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchPost,\n    fetchUsers,\n    fetchPostVote,\n    fetchSubreddits,\n    fetchPostComments,\n    addComment,\n    deletePost,\n    upvote,\n    downvote\n  }\n)(Post);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getTextPreview from '../../utils/getTextPreview';\n\nimport MarkedText from '../layout/MarkedText';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nconst UserPost = ({\n  post,\n  user,\n  subreddit,\n  currentUser,\n  vote,\n  deletePost\n}) => {\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n  return (\n    <div className=\"box\">\n      <div className=\"media\">\n        <div className=\"media-left align-center\">\n          <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n            <figure className=\"image is-128x128 center-image border-image\">\n              <img\n                src={imageSrc}\n                alt=\"\"\n              />\n            </figure>\n          </a>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { subreddit !== undefined && <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link> }\n          </p>\n          {\n            post.desc && (\n              <div className=\"mb-3\">\n                <MarkedText>{getTextPreview(post.desc)}</MarkedText>\n              </div>\n            )\n          }\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item\">\n                <p className=\"is-size-7\">\n                  { subreddit !== undefined && <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link> }\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        {\n          (user !== null && user.id === currentUser.id) && (\n            <div className=\"media-right\">\n              <button\n                className=\"delete\"\n                onClick={() => deletePost(post.id, vote.id)}\n              >\n                X\n              </button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nUserPost.propTypes = {\n  post: PropTypes.object,\n  user: PropTypes.object,\n  subreddit: PropTypes.object,\n  currentUser: PropTypes.object,\n  vote: PropTypes.object,\n  deletePost: PropTypes.func,\n}\n\nexport default UserPost;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\nimport MarkedText from '../layout/MarkedText';\n\nconst UserComment = ({\n  comment,\n  user,\n  currentUser,\n  deleteComment\n}) => {\n  return (\n    <div className=\"box\">\n      <div className=\"media\">\n        <div className=\"media-left align-center\">\n          <figure className=\"image is-64x64 center-image\">\n            <img\n              src={ user.image }\n              alt='user avatar'\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"has-text-weight-bold\">\n            { user.name }\n          </p>\n          <div className=\"mb-3\">\n            <MarkedText>{ comment.content }</MarkedText>\n          </div>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <div className=\"level-item is-size-7\">\n                <span className=\"created-at mr-2\"><span className=\"has-text-weight-bold\">Created on:</span> {commentTimeFormatter(comment.created_at.seconds)}</span>\n                <span className=\"updated-at ml-2\"><span className=\"has-text-weight-bold\">Updated on:</span> {commentTimeFormatter(comment.updated_at.seconds)}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        {\n          (user !== null && user.id === currentUser.id) && (\n            <div className=\"media-right\">\n              <button\n                className=\"delete\"\n                onClick={() => deleteComment(comment.id)}\n              >\n                X\n              </button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nUserComment.propTypes = {\n  comment: PropTypes.object,\n  user: PropTypes.object,\n  currentUser: PropTypes.object,\n  deleteComment: PropTypes.func,\n}\n\nexport default UserComment;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport commentTimeFormatter from '../../utils/commentTimeFormatter';\n\nimport MarkedText from '../layout/MarkedText';\n\nconst UserMobileComment = ({\n  comment,\n  user,\n  currentUser,\n  deleteComment\n}) => {\n  return (\n    <div className=\"card mobile-card\">\n      {\n        user !== undefined && (\n          <div className=\"card-header\">\n            <span className=\"card-header-title\">\n              <figure className=\"mb-0 mr-3 image is-24x24\">\n                <img\n                  className=\"is-rounded\"\n                  alt=\"\"\n                  src={user.image}\n                />\n              </figure>\n              {user.name}\n            </span>\n          </div>\n        )\n      }\n      <div className=\"card-content\">\n        <div className=\"content\">\n          <MarkedText>{ comment.content }</MarkedText>\n          <p className=\"is-size-7 mt-3 mb-0\">\n            <span className=\"is-italic\">Created</span> {commentTimeFormatter(comment.created_at.seconds)}\n          </p>\n          <p className=\"is-size-7 mt-0 mb-0\">\n            <span className=\"is-italic\">Updated</span> {commentTimeFormatter(comment.updated_at.seconds)}\n          </p>\n        </div>\n      </div>\n      {\n        (user !== null && user.id === currentUser.id) && (\n          <button className=\"delete-button\" onClick={() => deleteComment(comment.id)}>X</button>\n        )\n      }\n    </div>\n  )\n}\n\nUserMobileComment.propTypes = {\n  comment: PropTypes.object,\n  user: PropTypes.object,\n  currentUser: PropTypes.object,\n  deleteComment: PropTypes.func,\n}\n\nexport default UserMobileComment;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nconst UserMobileCard = ({\n  post,\n  user,\n  subreddit,\n  currentUser,\n  vote,\n  deletePost\n}) => {\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n  return (\n    <div className=\"card mobile-card\">\n      {\n        post !== undefined && (\n          <div className=\"card-image\">\n            <figure className=\"image is-4by3\">\n              <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n                <img\n                  src={imageSrc}\n                  alt=\"\"\n                />\n              </a>\n            </figure>\n          </div>\n        )\n      }\n      <div className=\"card-content\">\n        <p className=\"mt-0 mb-0\">\n          {subreddit !== undefined && <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link>}\n        </p>\n        {\n          post.desc && (\n            <p className=\"mt-0 mb-0\">\n              {post.desc}\n            </p>\n          )\n        }\n      </div>\n      {\n        (user !== null && user.id === currentUser.id) && (\n          <button className=\"delete-button\" onClick={() => deletePost(post.id, vote.id)}>X</button>\n        )\n      }\n    </div>\n  )\n}\n\nUserMobileCard.propTypes = {\n  post: PropTypes.object,\n  user: PropTypes.object,\n  subreddit: PropTypes.object,\n  currentUser: PropTypes.object,\n  vote: PropTypes.object,\n  deletePost: PropTypes.func,\n}\n\nexport default UserMobileCard;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getDocById from '../../utils/getDocById';\nimport { isMobile } from 'react-device-detect';\n\nimport Container from '../layout/Container';\nimport UserPost from './UserPost';\nimport UserComment from './UserComment';\nimport UserMobileComment from '../mobile/UserMobileComment';\nimport UserMobileCard from '../mobile/UserMobileCard';\n\nimport { connect } from 'react-redux';\nimport { fetchVotes } from '../../actions/votes';\nimport { fetchUser } from '../../actions/users';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { deletePost, fetchUserPosts } from '../../actions/posts';\nimport { deleteComment, fetchUserComments } from '../../actions/comments';\n\nconst User = ({\n  deletePost,\n  deleteComment,\n  fetchUser,\n  fetchVotes,\n  fetchUserPosts,\n  fetchUserComments,\n  fetchSubreddits,\n  posts: { posts, isLoading },\n  comments: { comments },\n  users: { user, users },\n  auth: { currentUser },\n  subreddits: { subreddits },\n  votes: { votes }\n}) => {\n  const { user_id } = useParams();\n  useEffect(() => {\n    fetchUser(user_id);\n    fetchUserPosts(user_id);\n    fetchUserComments(user_id);\n    fetchSubreddits();\n    fetchVotes();\n  }, [\n    fetchUserPosts,\n    fetchSubreddits,\n    fetchUserComments,\n    fetchVotes,\n    fetchUser,\n    user_id\n  ]);\n  const [ userPostList, toggleUserPostList ] = useState(true);\n  const [ userCommentList, toggleUserCommentList ] = useState(false);\n\n  const handlePostList = () => {\n    toggleUserPostList(true);\n    toggleUserCommentList(false);\n  }\n  const handleCommentList = () => {\n    toggleUserCommentList(true);\n    toggleUserPostList(false);\n  }\n\n  return (\n    <section>\n      <div className=\"hero is-primary mb-5\">\n        <div className=\"hero-body\">\n          <div className=\"container has-text-centered\">\n            <figure className=\"image is-32x32\" style={{ margin: '0 auto' }}>\n              <img src={ (user !== null && user.image) && user.image } alt=\"User avatar\" />\n            </figure>\n            <h1 className=\"title\">\n              { user !== null && user.name }\n            </h1>\n            {\n              (user !== null && user.bio !== '') && (\n                <h2 className=\"subtitle\">{user.bio}</h2>\n              )\n            }\n          </div>\n        </div>\n      </div>\n      <Container>\n        <div className=\"buttons my-2\">\n          <button\n            className={`button is-small is-info ${userPostList && 'is-light'}`}\n            disabled={userPostList}\n            onClick={() => handlePostList()}\n          >\n            User Posts\n          </button>\n          <button\n            className={`button is-small is-warning ${userCommentList && 'is-light'}`}\n            disabled={userCommentList}\n            onClick={() => handleCommentList()}\n          >\n            User Comments\n          </button>\n        </div>\n        {\n          userPostList && (\n            <div className=\"user-posts\">\n              {\n                (posts.length !== 0 && !isLoading) && (\n                  posts.map(post => {\n                    let vote = getDocById(votes, post.id, 'post_id');\n                    let subreddit = getDocById(subreddits, post.subreddit_id);\n                    return isMobile ? (\n                      <UserMobileCard\n                        key={post.id}\n                        post={post}\n                        user={user}\n                        subreddit={subreddit}\n                        currentUser={currentUser}\n                        vote={vote}\n                        deletePost={deletePost}\n                      />\n                    ) : (\n                      <UserPost\n                        key={post.id}\n                        vote={vote}\n                        subreddit={subreddit}\n                        currentUser={currentUser}\n                        deletePost={deletePost}\n                        user={user}\n                        post={post}\n                      />\n                    )\n                  })\n                )\n              }\n            </div>\n          )\n        }\n        {\n          userCommentList && (\n            <div className=\"user-comments\">\n              {\n                (comments.length !== 0 && !isLoading) && (\n                  comments.map(comment => {\n                    return isMobile ? (\n                      <UserMobileComment\n                        key={comment.id}\n                        comment={comment}\n                        user={user}\n                        currentUser={currentUser}\n                        deleteComment={deleteComment}\n                      />\n                    ) : (\n                      <UserComment\n                        key={comment.id}\n                        comment={comment}\n                        user={user}\n                        currentUser={currentUser}\n                        deleteComment={deleteComment}\n                      />\n                    )\n                  })\n                )\n              }\n            </div>\n          )\n        }\n      </Container>\n    </section>\n  )\n}\n\nUser.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  fetchUserPosts: PropTypes.func.isRequired,\n  fetchUser: PropTypes.func.isRequired,\n  fetchVotes: PropTypes.func.isRequired,\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchUserComments: PropTypes.func.isRequired,\n  users: PropTypes.object,\n  auth: PropTypes.object,\n  posts: PropTypes.object,\n  votes: PropTypes.object,\n  comments: PropTypes.array,\n  subreddits: PropTypes.object,\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  auth: state.auth,\n  posts: state.posts,\n  votes: state.votes,\n  subreddits: state.subreddits,\n  comments: state.comments\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    deletePost,\n    deleteComment,\n    fetchUser,\n    fetchVotes,\n    fetchUserPosts,\n    fetchSubreddits,\n    fetchUserComments\n  }\n)(User)","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getTextPreview from '../../utils/getTextPreview';\n\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\nimport MarkedText from '../layout/MarkedText';\n\nconst SubCard = ({\n  subreddit,\n  post\n}) => {\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n  return (\n    <div className=\"column is-4 post-column\">\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <p className=\"is-capitalized card-header-title\">\n            <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link>\n          </p>\n        </div>\n        <div className=\"card-content\">\n          <div className=\"media\">\n            <div className=\"media-left align-center\">\n              <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n                <figure className=\"image is-128x128 center-image border-image\">\n                    <img\n                      src={imageSrc}\n                      alt=\"\"\n                    />\n                </figure>\n              </a>\n            </div>\n            <div className=\"media-content\">\n              <p className=\"title is-4\">\n                <Link to={`/r/${subreddit.name}/${post.id}`}>{post.title}</Link>\n              </p>\n            </div>\n          </div>\n          {post.desc && (\n            <div className=\"content\">\n              <MarkedText>{getTextPreview(post.desc)}</MarkedText>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSubCard.propTypes = {\n  subreddit: PropTypes.object,\n  post: PropTypes.object,\n}\n\nexport default SubCard;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getTextPreview from '../../utils/getTextPreview';\n\nimport MarkedText from '../layout/MarkedText';\nimport LinkImage from '../../images/defaults/link.png';\nimport SpeechBubble from '../../images/defaults/speech-bubble.jpg';\n\nconst SubMobileCard = ({\n  subreddit,\n  post\n}) => {\n  let imageSrc;\n  let aHref;\n  if (post.image !== '') {\n    imageSrc = post.image;\n    aHref = post.image;\n  } else if (post.fileRef !== '') {\n    imageSrc = post.fileRef;\n    aHref = post.fileRef;\n  } else if (post.url !== '') {\n    imageSrc = LinkImage;\n    aHref = post.url;\n  } else {\n    imageSrc = SpeechBubble;\n    aHref = `/r/${subreddit.name}/${post.id}`;\n  }\n  return (\n    <div className=\"column post-column\">\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <p className=\"is-capitalized card-header-title\">\n            <Link to={`/r/${subreddit.name}`}>{subreddit.name}</Link>\n          </p>\n        </div>\n        <div className=\"card-image\">\n          <figure className=\"image is-4by3\">\n            <a href={aHref} rel=\"noopener noreferrer\" target=\"_blank\">\n              <img\n                src={imageSrc}\n                alt=\"\"\n              />\n            </a>\n          </figure>\n        </div>\n        <div className=\"card-content\">\n          <div className=\"content\">\n            <p className=\"title is-6\">\n              <Link to={`/r/${subreddit.name}/${post.id}`}>\n                {post.title}\n              </Link>\n            </p>\n            {\n              post.desc && (\n                <div className=\"mb-3\">\n                  <MarkedText>{getTextPreview(post.desc)}</MarkedText>\n                </div>\n              )\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSubMobileCard.propTypes = {\n  subreddit: PropTypes.object,\n  post: PropTypes.object,\n}\n\nexport default SubMobileCard;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport getDocById from '../../utils/getDocById';\nimport { isMobile } from 'react-device-detect';\n\nimport Container from '../layout/Container';\nimport SubCard from './SubCard';\nimport SubMobileCard from '../mobile/SubMobileCard';\n\nimport { connect } from 'react-redux';\nimport { fetchSubreddits } from '../../actions/subreddits';\nimport { fetchAllPosts } from '../../actions/posts';\n\nconst Subreddits = ({\n  fetchSubreddits,\n  fetchAllPosts,\n  posts: { posts },\n  subreddits: { subreddits }\n}) => {\n  useEffect(() => {\n    fetchSubreddits();\n    fetchAllPosts();\n  }, [\n    fetchSubreddits,\n    fetchAllPosts\n  ]);\n  return (\n    <section>\n      <div className=\"hero is-warning is-medium\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Subreddits\n            </h1>\n            <h2>\n              See the latest from each Subreddit\n            </h2>\n          </div>\n        </div>\n      </div>\n      <Container>\n        <div className=\"columns is-multiline is-4\">\n          {\n            subreddits.length !== 0 && (\n              subreddits.map(sub => {\n                let post = getDocById(posts, sub.id, 'subreddit_id');\n                if (post === undefined) {\n                  post = {\n                    title: 'Nothing here yet!',\n                    url: '',\n                    image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/VisualEditor_-_Icon_-_Link.svg/768px-VisualEditor_-_Icon_-_Link.svg.png',\n                    user_id: 'none',\n                    subreddit_id: sub.id,\n                    id: 'none',\n                    desc: 'Be the first to post in this subreddit!',\n                    created_at: {\n                      seconds: 0,\n                      nanoseconds: 0\n                    },\n                    updated_at: {\n                      seconds: 0,\n                      nanoseconds: 0\n                    }\n                  };\n                }\n                return isMobile ? (\n                  <SubMobileCard\n                    key={sub.id}\n                    subreddit={sub}\n                    post={post}\n                  />\n                ) : (\n                  <SubCard\n                    key={sub.id}\n                    subreddit={sub}\n                    post={post}\n                  />\n                )\n              })\n            )\n          }\n        </div>\n      </Container>\n    </section>\n  )\n}\n\nSubreddits.propTypes = {\n  fetchSubreddits: PropTypes.func.isRequired,\n  fetchAllPosts: PropTypes.func.isRequired,\n  subreddits: PropTypes.object,\n  posts: PropTypes.object,\n}\n\nconst mapStateToProps = state => {\n  return {\n    subreddits: state.subreddits,\n    posts: state.posts\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchSubreddits,\n    fetchAllPosts\n  }\n)(Subreddits);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport MarkedText from '../layout/MarkedText';\nimport Container from '../layout/Container';\n\nimport { connect } from 'react-redux';\nimport { createSubreddit } from '../../actions/subreddits';\n\nconst CreateSubreddit = ({\n  createSubreddit,\n  auth: { currentUser }\n}) => {\n  const [ previewMarkdown, togglePreviewMarkdown ] = useState(false);\n  const [ input, setInput ] = useState({\n    name: '',\n    desc: '',\n    color: 'yellow'\n  });\n  const { name, desc, color } = input;\n  let history = useHistory();\n\n  const handleChange = event => {\n    setInput({\n      ...input,\n      [event.target.name]: event.target.value\n    })\n  }\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Get currentUser.id\n    let user_id = currentUser.id;\n    let name = input.name.toLowerCase();\n    name = name.replaceAll(/\\W/g, '')\n\n\n    let newSubreddit = {\n      name,\n      desc: input.desc,\n      user_id,\n      color\n    }\n\n    createSubreddit(newSubreddit, history);\n    setInput({\n      name: '',\n      desc: '',\n      color: ''\n    });\n  }\n  return (\n    <Container>\n      <h1 className=\"has-text-centered is-title\">Create a Subreddit</h1>\n      <form className=\"create-sub-form\" onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"label\">Name</label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"Name the Subreddit\"\n              onChange={event => handleChange(event)}\n              maxLength=\"20\"\n            />\n          </div>\n        </div>\n        <button\n        type=\"button\"\n        className=\"button is-info is-small mb-3\"\n        onClick={() => togglePreviewMarkdown(!previewMarkdown)}\n      >\n        {previewMarkdown ? 'Hide Preview' : 'Preview Description'}\n      </button>\n\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"label\">Description</label>\n          {\n            previewMarkdown ? (\n              <div className=\"preview-markdown\">\n                <MarkedText>{desc}</MarkedText>\n              </div>\n            ) : (\n              <textarea\n                className=\"textarea\"\n                placeholder=\"Desc\"\n                type=\"text\"\n                value={desc}\n                name=\"desc\"\n                onChange={event => handleChange(event)}\n              >\n              </textarea>\n            )\n          }\n        </div>\n      </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label className=\"label\">Color</label>\n            <div className=\"select\">\n              <select name=\"color\" onChange={event => handleChange(event)}>\n                <option selected value=\"yellow\">Yellow</option>\n                <option value=\"dark\">Black</option>\n                <option value=\"light\">Light gray</option>\n                <option value=\"lightblue\">Light blue</option>\n                <option value=\"darkblue\">Dark blue</option>\n                <option value=\"teal\">Teal</option>\n                <option value=\"green\">Green</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-primary\">Create Subreddit</button>\n        </div>\n      </form>\n    </Container>\n  )\n}\n\nCreateSubreddit.propTypes = {\n  auth: PropTypes.object,\n  createSubreddit: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    createSubreddit\n  }\n)(CreateSubreddit);","import {\n  GET_USERS,\n  GET_USER,\n  CLEAR_USER\n} from '../actions/types';\n\nconst initialState = {\n  users: [],\n  user: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: [...payload],\n        isLoading: false\n      }\n    case GET_USER:\n      return {\n        ...state,\n        isLoading: false,\n        user: payload\n      }\n    case CLEAR_USER:\n      return {\n        ...state,\n        isLoading: false,\n        user: null\n      }\n    default:\n      return state;\n  }\n}","import {\n  LOGIN_USER,\n  LOGOUT_USER,\n  GET_CURRENT_USER,\n  LOGIN_FAIL\n} from '../actions/types';\n\nconst initialState = {\n  currentUser: {},\n  isLoggedIn: false,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case LOGIN_USER:\n    case GET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: {...payload},\n        isLoggedIn: true,\n        isLoading: false\n      };\n    case LOGOUT_USER:\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        currentUser: {},\n        isLoggedIn: false,\n        isLoading: false\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_POSTS,\n  GET_POST,\n  CREATE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  CLEAR_POST,\n  CLEAR_POSTS\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...payload]\n      }\n    case GET_POST:\n      return {\n        ...state,\n        isLoading: false,\n        post: payload\n      }\n    case CREATE_POST:\n      return {\n        ...state,\n        isLoading: false,\n        posts: [payload, ...state.posts]\n      }\n    case UPDATE_POST:\n      // go through state.posts and filter out the post with post.id === payload.id\n      let updatedPosts = state.posts.filter(post => post.id !== payload.id);\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...updatedPosts, payload],\n        post: payload\n      }\n    case DELETE_POST:\n      // go through state.posts and filter out the posts with post.id === payload\n      let newPosts = state.posts.filter(post => post.id !== payload);\n\n      return {\n        ...state,\n        isLoading: false,\n        posts: [...newPosts]\n      }\n    case CLEAR_POST:\n      return {\n        ...state,\n        isLoading: false,\n        post: null\n      }\n    case CLEAR_POSTS:\n      return {\n        ...state,\n        isLoading: false,\n        posts: []\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_SUBREDDITS,\n  GET_SUBREDDIT,\n  CREATE_SUBREDDIT,\n  UPDATE_SUBREDDIT,\n  DELETE_SUBREDDIT,\n  CLEAR_SUBREDDIT\n} from '../actions/types';\n\nconst initialState = {\n  subreddits: [],\n  subreddit: null,\n  isLoading: true\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_SUBREDDITS:\n      return {\n        ...state,\n        subreddits: payload,\n        isLoading: false\n      }\n    case GET_SUBREDDIT:\n      return {\n        ...state,\n        subreddit: payload,\n        isLoading: false\n      }\n    case CREATE_SUBREDDIT:\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...state.subreddits, payload]\n      }\n    case UPDATE_SUBREDDIT:\n      const updatedSubreddits = state.subreddits.filter(subreddit => subreddit.id !== payload.id);\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...updatedSubreddits, payload]\n      }\n    case DELETE_SUBREDDIT:\n      const deletedSubreddits = state.subreddits.filter(subreddit => subreddit.id !== payload);\n      return {\n        ...state,\n        isLoading: false,\n        subreddits: [...deletedSubreddits]\n      }\n    case CLEAR_SUBREDDIT:\n      return {\n        ...state,\n        subreddit: null,\n        isLoading: false\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_COMMENTS,\n  ADD_COMMENT,\n  UPDATE_COMMENT,\n  DELETE_COMMENT,\n  CLEAR_COMMENTS\n} from '../actions/types';\n\nconst initialState = {\n  comments: [],\n  isLoading: true\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch(type) {\n    case GET_COMMENTS:\n      return {\n        ...state,\n        isLoading: false,\n        comments: payload\n      }\n    case ADD_COMMENT:\n      return {\n        ...state,\n        isLoading: false,\n        comments: [...state.comments, payload]\n      }\n    case UPDATE_COMMENT:\n      let updatedComments = state.comments.filter(comment => comment.id !== payload.id);\n      return {\n        ...state,\n        isLoading: false,\n        comments: [...updatedComments, payload]\n      }\n    case DELETE_COMMENT:\n      let deleteComment = state.comments.filter(comment => comment.id !== payload);\n      return {\n        ...state,\n        isLoading: false,\n        comments: [...deleteComment]\n      }\n    case CLEAR_COMMENTS:\n      return {\n        ...state,\n        isLoading: false,\n        comments: []\n      }\n    default:\n      return state;\n  }\n}","import {\n  GET_VOTES,\n  GET_VOTE,\n  ADD_VOTE,\n  ADD_VOTES,\n  REMOVE_VOTE,\n  DELETE_VOTE,\n  CLEAR_VOTE\n} from '../actions/types';\n\nconst initialState = {\n  votes: [],\n  vote: null,\n  isLoading: true\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case GET_VOTES:\n      return {\n        ...state,\n        votes: [...payload],\n        isLoading: false\n      }\n    case GET_VOTE:\n      return {\n        ...state,\n        vote: payload,\n        isLoading: false\n      }\n    case ADD_VOTES:\n      return {\n        ...state,\n        votes: [...state.votes, payload],\n        isLoading: false\n      }\n    case ADD_VOTE:\n      // filter out the vote object that contains matching post_id\n      let addVote = state.votes.filter(vote => vote.id !== payload.id);\n\n      // then insert the payload object\n      return {\n        ...state,\n        votes: [...addVote, payload],\n        isLoading: false\n      }\n    case REMOVE_VOTE:\n      // filter out the vote object that contains matching post_id\n      let removeVote = state.votes.filter(vote => vote.id !== payload.id);\n\n      // then insert the payload object\n      return {\n        ...state,\n        votes: [...removeVote, payload],\n        isLoading: false\n      }\n    case DELETE_VOTE:\n      let deleteVote = state.votes.filter(vote => vote.id !== payload);\n\n      return {\n        ...state,\n        isLoading: false,\n        votes: [...deleteVote]\n      }\n    case CLEAR_VOTE:\n      return {\n        ...state,\n        isLoading: false,\n        vote: null\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\n\nimport users from './users';\nimport auth from './auth';\nimport posts from './posts';\nimport subreddits from './subreddits';\nimport comments from './comments';\nimport votes from './votes';\n\n/* root reducer */\nexport default combineReducers({\n  users,\n  auth,\n  posts,\n  subreddits,\n  comments,\n  votes\n});","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst initialState = {};\nconst middleware = [thunk];\n\n/* createStore( reducer, initState, middleware ) */\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store;","/*\n\nTODOS:\n= Consistent margins and paddings\n= Comments throughout app\n= Reorganize components (!!!)\n= Clean up PostForm / UpdatePostForm\n= Include signup by email / password\n= Rename Reggit\n\n*/\n\nimport React, { useEffect } from 'react';\nimport './App.scss';\n// import 'bulma/css/bulma.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport firebase from './firebase';\n\nimport Header from './components/layout/Header';\nimport Footer from './components/layout/Footer';\nimport PrivateRoute from './components/routing/PrivateRoute';\n\nimport Index from './components/homepage/Index';\nimport Subreddit from './components/subreddit/Subreddit';\nimport Post from './components/post/Post';\nimport User from './components/user/User';\nimport Subreddits from './components/subreddits/Subreddits';\nimport CreateSubreddit from './components/createSubreddit/CreateSubreddit';\n\nimport store from './store';\nimport { getUser, userError } from './actions/auth';\n\nfunction App() {\n  // check if a user is logged in throughout\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => {\n      // if a user exists, update the store with user information\n      if (user) {\n        let setUser = {\n          name: user.displayName,\n          id: user.uid,\n          image: user.photoURL\n        }\n        store.dispatch(getUser(setUser));\n      } else {\n        store.dispatch(userError());\n      }\n    });\n  });\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"content\">\n          <Header />\n            <Switch>\n              <Redirect exact from='/' to='/r/offerings' component={Index} />\n              <PrivateRoute exact path='/create-a-subreddit' component={CreateSubreddit} />\n              <Route exact path='/r/index' component={Subreddits} />\n              <Route exact path ='/r/:name' component={Subreddit} />\n              <Route exact path='/r/:name/:post_id' component={Post} />\n              <Route exact path='/u/:user_id' component={User} />\n            </Switch>\n          </div>\n        </div>\n        <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}